
mcs_main_computer_can_master_nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b10  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002cd4  08002cd4  00012cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ce4  08002ce4  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08002ce4  08002ce4  00012ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002cec  08002cec  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cec  08002cec  00012cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002cf0  08002cf0  00012cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08002cf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000078  08002d6c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08002d6c  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000075ef  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001931  00000000  00000000  00027697  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000680  00000000  00000000  00028fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005a8  00000000  00000000  00029648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000208da  00000000  00000000  00029bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008887  00000000  00000000  0004a4ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4b49  00000000  00000000  00052d51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011789a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001844  00000000  00000000  001178ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000078 	.word	0x20000078
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002cbc 	.word	0x08002cbc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000007c 	.word	0x2000007c
 8000200:	08002cbc 	.word	0x08002cbc

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800050c:	4b17      	ldr	r3, [pc, #92]	; (800056c <MX_CAN1_Init+0x64>)
 800050e:	4a18      	ldr	r2, [pc, #96]	; (8000570 <MX_CAN1_Init+0x68>)
 8000510:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 8000512:	4b16      	ldr	r3, [pc, #88]	; (800056c <MX_CAN1_Init+0x64>)
 8000514:	2202      	movs	r2, #2
 8000516:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000518:	4b14      	ldr	r3, [pc, #80]	; (800056c <MX_CAN1_Init+0x64>)
 800051a:	2200      	movs	r2, #0
 800051c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800051e:	4b13      	ldr	r3, [pc, #76]	; (800056c <MX_CAN1_Init+0x64>)
 8000520:	2200      	movs	r2, #0
 8000522:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000524:	4b11      	ldr	r3, [pc, #68]	; (800056c <MX_CAN1_Init+0x64>)
 8000526:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800052a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800052c:	4b0f      	ldr	r3, [pc, #60]	; (800056c <MX_CAN1_Init+0x64>)
 800052e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000532:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000534:	4b0d      	ldr	r3, [pc, #52]	; (800056c <MX_CAN1_Init+0x64>)
 8000536:	2200      	movs	r2, #0
 8000538:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800053a:	4b0c      	ldr	r3, [pc, #48]	; (800056c <MX_CAN1_Init+0x64>)
 800053c:	2200      	movs	r2, #0
 800053e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000540:	4b0a      	ldr	r3, [pc, #40]	; (800056c <MX_CAN1_Init+0x64>)
 8000542:	2200      	movs	r2, #0
 8000544:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000546:	4b09      	ldr	r3, [pc, #36]	; (800056c <MX_CAN1_Init+0x64>)
 8000548:	2200      	movs	r2, #0
 800054a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800054c:	4b07      	ldr	r3, [pc, #28]	; (800056c <MX_CAN1_Init+0x64>)
 800054e:	2200      	movs	r2, #0
 8000550:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000552:	4b06      	ldr	r3, [pc, #24]	; (800056c <MX_CAN1_Init+0x64>)
 8000554:	2200      	movs	r2, #0
 8000556:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000558:	4804      	ldr	r0, [pc, #16]	; (800056c <MX_CAN1_Init+0x64>)
 800055a:	f000 fd19 	bl	8000f90 <HAL_CAN_Init>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000564:	f000 fbc2 	bl	8000cec <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000568:	bf00      	nop
 800056a:	bd80      	pop	{r7, pc}
 800056c:	20000094 	.word	0x20000094
 8000570:	40006400 	.word	0x40006400

08000574 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b08a      	sub	sp, #40	; 0x28
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057c:	f107 0314 	add.w	r3, r7, #20
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a29      	ldr	r2, [pc, #164]	; (8000638 <HAL_CAN_MspInit+0xc4>)
 8000592:	4293      	cmp	r3, r2
 8000594:	d14c      	bne.n	8000630 <HAL_CAN_MspInit+0xbc>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000596:	2300      	movs	r3, #0
 8000598:	613b      	str	r3, [r7, #16]
 800059a:	4b28      	ldr	r3, [pc, #160]	; (800063c <HAL_CAN_MspInit+0xc8>)
 800059c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059e:	4a27      	ldr	r2, [pc, #156]	; (800063c <HAL_CAN_MspInit+0xc8>)
 80005a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005a4:	6413      	str	r3, [r2, #64]	; 0x40
 80005a6:	4b25      	ldr	r3, [pc, #148]	; (800063c <HAL_CAN_MspInit+0xc8>)
 80005a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005ae:	613b      	str	r3, [r7, #16]
 80005b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b2:	2300      	movs	r3, #0
 80005b4:	60fb      	str	r3, [r7, #12]
 80005b6:	4b21      	ldr	r3, [pc, #132]	; (800063c <HAL_CAN_MspInit+0xc8>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	4a20      	ldr	r2, [pc, #128]	; (800063c <HAL_CAN_MspInit+0xc8>)
 80005bc:	f043 0301 	orr.w	r3, r3, #1
 80005c0:	6313      	str	r3, [r2, #48]	; 0x30
 80005c2:	4b1e      	ldr	r3, [pc, #120]	; (800063c <HAL_CAN_MspInit+0xc8>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	f003 0301 	and.w	r3, r3, #1
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80005ce:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80005d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d4:	2302      	movs	r3, #2
 80005d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d8:	2300      	movs	r3, #0
 80005da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005dc:	2303      	movs	r3, #3
 80005de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80005e0:	2309      	movs	r3, #9
 80005e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e4:	f107 0314 	add.w	r3, r7, #20
 80005e8:	4619      	mov	r1, r3
 80005ea:	4815      	ldr	r0, [pc, #84]	; (8000640 <HAL_CAN_MspInit+0xcc>)
 80005ec:	f001 fc44 	bl	8001e78 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2100      	movs	r1, #0
 80005f4:	2013      	movs	r0, #19
 80005f6:	f001 fc08 	bl	8001e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80005fa:	2013      	movs	r0, #19
 80005fc:	f001 fc21 	bl	8001e42 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000600:	2200      	movs	r2, #0
 8000602:	2100      	movs	r1, #0
 8000604:	2014      	movs	r0, #20
 8000606:	f001 fc00 	bl	8001e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800060a:	2014      	movs	r0, #20
 800060c:	f001 fc19 	bl	8001e42 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000610:	2200      	movs	r2, #0
 8000612:	2100      	movs	r1, #0
 8000614:	2015      	movs	r0, #21
 8000616:	f001 fbf8 	bl	8001e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800061a:	2015      	movs	r0, #21
 800061c:	f001 fc11 	bl	8001e42 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000620:	2200      	movs	r2, #0
 8000622:	2100      	movs	r1, #0
 8000624:	2016      	movs	r0, #22
 8000626:	f001 fbf0 	bl	8001e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 800062a:	2016      	movs	r0, #22
 800062c:	f001 fc09 	bl	8001e42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000630:	bf00      	nop
 8000632:	3728      	adds	r7, #40	; 0x28
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40006400 	.word	0x40006400
 800063c:	40023800 	.word	0x40023800
 8000640:	40020000 	.word	0x40020000

08000644 <CAN_Init>:
          Filter configured in accordance with E&S Team Project Guidlines.
 *
 * @retval None.
 **/
void CAN_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	sFilterConfig.FilterBank = 1;
 8000648:	4b26      	ldr	r3, [pc, #152]	; (80006e4 <CAN_Init+0xa0>)
 800064a:	2201      	movs	r2, #1
 800064c:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800064e:	4b25      	ldr	r3, [pc, #148]	; (80006e4 <CAN_Init+0xa0>)
 8000650:	2200      	movs	r2, #0
 8000652:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000654:	4b23      	ldr	r3, [pc, #140]	; (80006e4 <CAN_Init+0xa0>)
 8000656:	2201      	movs	r2, #1
 8000658:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = Rx_ID << 5;
 800065a:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <CAN_Init+0xa0>)
 800065c:	f44f 52aa 	mov.w	r2, #5440	; 0x1540
 8000660:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8000662:	4b20      	ldr	r3, [pc, #128]	; (80006e4 <CAN_Init+0xa0>)
 8000664:	2200      	movs	r2, #0
 8000666:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0xFFFF << 5;
 8000668:	4b1e      	ldr	r3, [pc, #120]	; (80006e4 <CAN_Init+0xa0>)
 800066a:	4a1f      	ldr	r2, [pc, #124]	; (80006e8 <CAN_Init+0xa4>)
 800066c:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 800066e:	4b1d      	ldr	r3, [pc, #116]	; (80006e4 <CAN_Init+0xa0>)
 8000670:	2200      	movs	r2, #0
 8000672:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000674:	4b1b      	ldr	r3, [pc, #108]	; (80006e4 <CAN_Init+0xa0>)
 8000676:	2200      	movs	r2, #0
 8000678:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 800067a:	4b1a      	ldr	r3, [pc, #104]	; (80006e4 <CAN_Init+0xa0>)
 800067c:	2201      	movs	r2, #1
 800067e:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 8000680:	4b18      	ldr	r3, [pc, #96]	; (80006e4 <CAN_Init+0xa0>)
 8000682:	220e      	movs	r2, #14
 8000684:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8000686:	4917      	ldr	r1, [pc, #92]	; (80006e4 <CAN_Init+0xa0>)
 8000688:	4818      	ldr	r0, [pc, #96]	; (80006ec <CAN_Init+0xa8>)
 800068a:	f000 fd7d 	bl	8001188 <HAL_CAN_ConfigFilter>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <CAN_Init+0x54>
	{
		/* Filter configuration Error */
		Error_Handler();
 8000694:	f000 fb2a 	bl	8000cec <Error_Handler>
	}
	if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8000698:	4814      	ldr	r0, [pc, #80]	; (80006ec <CAN_Init+0xa8>)
 800069a:	f000 fe55 	bl	8001348 <HAL_CAN_Start>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <CAN_Init+0x64>
	{
		/* Start Error */
		Error_Handler();
 80006a4:	f000 fb22 	bl	8000cec <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 80006a8:	2103      	movs	r1, #3
 80006aa:	4810      	ldr	r0, [pc, #64]	; (80006ec <CAN_Init+0xa8>)
 80006ac:	f001 f87d 	bl	80017aa <HAL_CAN_ActivateNotification>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <CAN_Init+0x76>
	{
		/* Notification Error */
		Error_Handler();
 80006b6:	f000 fb19 	bl	8000cec <Error_Handler>
	}

	TxHeader.StdId = Tx_ID;
 80006ba:	4b0d      	ldr	r3, [pc, #52]	; (80006f0 <CAN_Init+0xac>)
 80006bc:	22bb      	movs	r2, #187	; 0xbb
 80006be:	601a      	str	r2, [r3, #0]
	TxHeader.ExtId = 0x0000;
 80006c0:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <CAN_Init+0xac>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	605a      	str	r2, [r3, #4]
	TxHeader.RTR = CAN_RTR_DATA;
 80006c6:	4b0a      	ldr	r3, [pc, #40]	; (80006f0 <CAN_Init+0xac>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	60da      	str	r2, [r3, #12]
	TxHeader.IDE = CAN_ID_STD;
 80006cc:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <CAN_Init+0xac>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 8;
 80006d2:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <CAN_Init+0xac>)
 80006d4:	2208      	movs	r2, #8
 80006d6:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 80006d8:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <CAN_Init+0xac>)
 80006da:	2200      	movs	r2, #0
 80006dc:	751a      	strb	r2, [r3, #20]
}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	200000bc 	.word	0x200000bc
 80006e8:	001fffe0 	.word	0x001fffe0
 80006ec:	20000094 	.word	0x20000094
 80006f0:	200000e4 	.word	0x200000e4

080006f4 <HAL_CAN_RxFifo0MsgPendingCallback>:
 *         the configuration information for the specified CAN.
 *
 * @retval None 
 **/
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
	CAN_Receive(hcan, &RxHeader, RxData);
 80006fc:	4a05      	ldr	r2, [pc, #20]	; (8000714 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 80006fe:	4906      	ldr	r1, [pc, #24]	; (8000718 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8000700:	6878      	ldr	r0, [r7, #4]
 8000702:	f000 f81c 	bl	800073e <CAN_Receive>
	CAN_On_Receive(RxData);
 8000706:	4803      	ldr	r0, [pc, #12]	; (8000714 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 8000708:	f000 f808 	bl	800071c <CAN_On_Receive>
}
 800070c:	bf00      	nop
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20000120 	.word	0x20000120
 8000718:	200000fc 	.word	0x200000fc

0800071c <CAN_On_Receive>:
 * @param RxData pointer to uint8_t array which stores received data
 * 
 * @retval None
 **/
void CAN_On_Receive(uint8_t *RxData)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	if(Read_RequestMessage == RxData[ReadMessage])
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	2b3d      	cmp	r3, #61	; 0x3d
 800072a:	d102      	bne.n	8000732 <CAN_On_Receive+0x16>
	{
		CAN_Respond();
 800072c:	f000 f838 	bl	80007a0 <CAN_Respond>
	}
	else
	{
		CAN_ProcessWriteCommand();
	}
}
 8000730:	e001      	b.n	8000736 <CAN_On_Receive+0x1a>
		CAN_ProcessWriteCommand();
 8000732:	f000 f85b 	bl	80007ec <CAN_ProcessWriteCommand>
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}

0800073e <CAN_Receive>:
 * @param RxData uint8_t pointer to array that will contain received data.
 * 
 * @retval None.
 **/
void CAN_Receive(CAN_HandleTypeDef *CANPointer, CAN_RxHeaderTypeDef *RxHeader, uint8_t *RxData)
{
 800073e:	b580      	push	{r7, lr}
 8000740:	b084      	sub	sp, #16
 8000742:	af00      	add	r7, sp, #0
 8000744:	60f8      	str	r0, [r7, #12]
 8000746:	60b9      	str	r1, [r7, #8]
 8000748:	607a      	str	r2, [r7, #4]
	if(HAL_CAN_GetRxMessage(CANPointer, CAN_RX_FIFO0, RxHeader, RxData) != HAL_OK)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	68ba      	ldr	r2, [r7, #8]
 800074e:	2100      	movs	r1, #0
 8000750:	68f8      	ldr	r0, [r7, #12]
 8000752:	f000 ff18 	bl	8001586 <HAL_CAN_GetRxMessage>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <CAN_Receive+0x22>
	{
		CANBUS_Error_Handler();
 800075c:	f000 f890 	bl	8000880 <CANBUS_Error_Handler>
	}
};
 8000760:	bf00      	nop
 8000762:	3710      	adds	r7, #16
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <CAN_Transmit>:
 * @param TxMailbox uint32_t pointer to array that contains whole CAN message to transmit.
 * 
 * @retval None.
 **/
void CAN_Transmit(CAN_TxHeaderTypeDef *TxHeader, uint8_t TxDLC, uint8_t *TxData, uint32_t *TxMailbox)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	60f8      	str	r0, [r7, #12]
 8000770:	607a      	str	r2, [r7, #4]
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	460b      	mov	r3, r1
 8000776:	72fb      	strb	r3, [r7, #11]
	TxHeader->DLC = TxDLC;
 8000778:	7afa      	ldrb	r2, [r7, #11]
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	611a      	str	r2, [r3, #16]
	if(HAL_CAN_AddTxMessage(&hcan1, TxHeader, TxData, TxMailbox) != HAL_OK)
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	687a      	ldr	r2, [r7, #4]
 8000782:	68f9      	ldr	r1, [r7, #12]
 8000784:	4805      	ldr	r0, [pc, #20]	; (800079c <CAN_Transmit+0x34>)
 8000786:	f000 fe23 	bl	80013d0 <HAL_CAN_AddTxMessage>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <CAN_Transmit+0x2c>
	{
		CANBUS_Error_Handler();
 8000790:	f000 f876 	bl	8000880 <CANBUS_Error_Handler>
	}
}
 8000794:	bf00      	nop
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20000094 	.word	0x20000094

080007a0 <CAN_Respond>:
 * @brief Function to respond in connection with read request from MCU
 * 
 * @retval None.
 **/
void CAN_Respond(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
	for (int i = FIRST_ARRAY_ELEMENT; i < NUMBER_OF_READ_REGS; i++)
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	e013      	b.n	80007d4 <CAN_Respond+0x34>
	{
		if (ResponseMessage[i].Response_RegID == RxData[ReadRegID])
 80007ac:	4a0d      	ldr	r2, [pc, #52]	; (80007e4 <CAN_Respond+0x44>)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	011b      	lsls	r3, r3, #4
 80007b2:	4413      	add	r3, r2
 80007b4:	3301      	adds	r3, #1
 80007b6:	781a      	ldrb	r2, [r3, #0]
 80007b8:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <CAN_Respond+0x48>)
 80007ba:	785b      	ldrb	r3, [r3, #1]
 80007bc:	429a      	cmp	r2, r3
 80007be:	d106      	bne.n	80007ce <CAN_Respond+0x2e>
		{
			ResponseMessage[i].Read_ReactionHandler();
 80007c0:	4a08      	ldr	r2, [pc, #32]	; (80007e4 <CAN_Respond+0x44>)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	011b      	lsls	r3, r3, #4
 80007c6:	4413      	add	r3, r2
 80007c8:	3304      	adds	r3, #4
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4798      	blx	r3
	for (int i = FIRST_ARRAY_ELEMENT; i < NUMBER_OF_READ_REGS; i++)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	3301      	adds	r3, #1
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2b02      	cmp	r3, #2
 80007d8:	d9e8      	bls.n	80007ac <CAN_Respond+0xc>
		}
	}
}
 80007da:	bf00      	nop
 80007dc:	bf00      	nop
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000000 	.word	0x20000000
 80007e8:	20000120 	.word	0x20000120

080007ec <CAN_ProcessWriteCommand>:
 * @brief Function to process write command
 * 
 * @retval None.
 **/
void CAN_ProcessWriteCommand(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
	for (int i = FIRST_ARRAY_ELEMENT; i < NUMBER_OF_WRITE_REGS; i++)
 80007f2:	2300      	movs	r3, #0
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	e01a      	b.n	800082e <CAN_ProcessWriteCommand+0x42>
	{
		if (WriteMessage[i].Write_RegID == RxData[WriteMessage_reg])
 80007f8:	4a11      	ldr	r2, [pc, #68]	; (8000840 <CAN_ProcessWriteCommand+0x54>)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	011b      	lsls	r3, r3, #4
 80007fe:	4413      	add	r3, r2
 8000800:	781a      	ldrb	r2, [r3, #0]
 8000802:	4b10      	ldr	r3, [pc, #64]	; (8000844 <CAN_ProcessWriteCommand+0x58>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	429a      	cmp	r2, r3
 8000808:	d10e      	bne.n	8000828 <CAN_ProcessWriteCommand+0x3c>
		{
			CAN_AcknowledgeWriteMessage(WriteMessage[i].Write_RegID);
 800080a:	4a0d      	ldr	r2, [pc, #52]	; (8000840 <CAN_ProcessWriteCommand+0x54>)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	011b      	lsls	r3, r3, #4
 8000810:	4413      	add	r3, r2
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	4618      	mov	r0, r3
 8000816:	f000 f817 	bl	8000848 <CAN_AcknowledgeWriteMessage>
			WriteMessage[i].Write_ReactionHandler();
 800081a:	4a09      	ldr	r2, [pc, #36]	; (8000840 <CAN_ProcessWriteCommand+0x54>)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	011b      	lsls	r3, r3, #4
 8000820:	4413      	add	r3, r2
 8000822:	3304      	adds	r3, #4
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4798      	blx	r3
	for (int i = FIRST_ARRAY_ELEMENT; i < NUMBER_OF_WRITE_REGS; i++)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	3301      	adds	r3, #1
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	2b02      	cmp	r3, #2
 8000832:	d9e1      	bls.n	80007f8 <CAN_ProcessWriteCommand+0xc>
		}
	}
}
 8000834:	bf00      	nop
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000030 	.word	0x20000030
 8000844:	20000120 	.word	0x20000120

08000848 <CAN_AcknowledgeWriteMessage>:
 * @param WriteReqID ID of received write instruction
 * 
 * @retval None.
 **/
void CAN_AcknowledgeWriteMessage(WriteRegsID WriteReqID)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	71fb      	strb	r3, [r7, #7]
	TxData[AcknowledgmentMessage_reg] = Write_AcknowledgmentMessage; // 1st Data Byte: Standard Write Acknowledgment instruction 
 8000852:	4b08      	ldr	r3, [pc, #32]	; (8000874 <CAN_AcknowledgeWriteMessage+0x2c>)
 8000854:	225d      	movs	r2, #93	; 0x5d
 8000856:	701a      	strb	r2, [r3, #0]
	TxData[WriteRegID] = WriteReqID;                                 // 2nd Data Byte: Acknowledged Received Write Command ReqID
 8000858:	4a06      	ldr	r2, [pc, #24]	; (8000874 <CAN_AcknowledgeWriteMessage+0x2c>)
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	7053      	strb	r3, [r2, #1]
	CAN_Transmit(&TxHeader, ACKNOWLEDMENT_DLC, TxData, &TxMailbox);  // Transmit Data
 800085e:	4b06      	ldr	r3, [pc, #24]	; (8000878 <CAN_AcknowledgeWriteMessage+0x30>)
 8000860:	4a04      	ldr	r2, [pc, #16]	; (8000874 <CAN_AcknowledgeWriteMessage+0x2c>)
 8000862:	2102      	movs	r1, #2
 8000864:	4805      	ldr	r0, [pc, #20]	; (800087c <CAN_AcknowledgeWriteMessage+0x34>)
 8000866:	f7ff ff7f 	bl	8000768 <CAN_Transmit>
}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	20000118 	.word	0x20000118
 8000878:	20000128 	.word	0x20000128
 800087c:	200000e4 	.word	0x200000e4

08000880 <CANBUS_Error_Handler>:
 * @brief General error handler of CAN connection and communication
 * 
 * @retval None.
 * */
void CANBUS_Error_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000884:	b672      	cpsid	i
}
 8000886:	bf00      	nop
	__disable_irq();
	/*
	Put here behaviour of ECU when error will be occured.
	*/
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr

08000892 <ReadReactionHandler1>:

/** Add function name
 * Add brief
 **/
void ReadReactionHandler1(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0
	// Here you should write the reation to Read request from MCU, e.g. prepare TxData[] with specific values
}
 8000896:	bf00      	nop
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <WriteReactionHandler1>:

/** Add function name
 * Add brief
 **/
void WriteReactionHandler1(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
	// Here you should write the reation to Write request from MCU
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
	...

080008b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b086      	sub	sp, #24
 80008b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c4:	2300      	movs	r3, #0
 80008c6:	603b      	str	r3, [r7, #0]
 80008c8:	4b10      	ldr	r3, [pc, #64]	; (800090c <MX_GPIO_Init+0x5c>)
 80008ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008cc:	4a0f      	ldr	r2, [pc, #60]	; (800090c <MX_GPIO_Init+0x5c>)
 80008ce:	f043 0301 	orr.w	r3, r3, #1
 80008d2:	6313      	str	r3, [r2, #48]	; 0x30
 80008d4:	4b0d      	ldr	r3, [pc, #52]	; (800090c <MX_GPIO_Init+0x5c>)
 80008d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d8:	f003 0301 	and.w	r3, r3, #1
 80008dc:	603b      	str	r3, [r7, #0]
 80008de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(internalLED_GPIO_Port, internalLED_Pin, GPIO_PIN_RESET);
 80008e0:	2200      	movs	r2, #0
 80008e2:	2120      	movs	r1, #32
 80008e4:	480a      	ldr	r0, [pc, #40]	; (8000910 <MX_GPIO_Init+0x60>)
 80008e6:	f001 fc5b 	bl	80021a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = internalLED_Pin;
 80008ea:	2320      	movs	r3, #32
 80008ec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ee:	2301      	movs	r3, #1
 80008f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f6:	2300      	movs	r3, #0
 80008f8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(internalLED_GPIO_Port, &GPIO_InitStruct);
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	4619      	mov	r1, r3
 80008fe:	4804      	ldr	r0, [pc, #16]	; (8000910 <MX_GPIO_Init+0x60>)
 8000900:	f001 faba 	bl	8001e78 <HAL_GPIO_Init>

}
 8000904:	bf00      	nop
 8000906:	3718      	adds	r7, #24
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40023800 	.word	0x40023800
 8000910:	40020000 	.word	0x40020000

08000914 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08e      	sub	sp, #56	; 0x38
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800091a:	f000 faa3 	bl	8000e64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800091e:	f000 f985 	bl	8000c2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000922:	f7ff ffc5 	bl	80008b0 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000926:	f7ff fdef 	bl	8000508 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  CAN_Init();
 800092a:	f7ff fe8b 	bl	8000644 <CAN_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_GPIO_WritePin(internalLED_GPIO_Port, internalLED_Pin, 1);
 800092e:	2201      	movs	r2, #1
 8000930:	2120      	movs	r1, #32
 8000932:	48ae      	ldr	r0, [pc, #696]	; (8000bec <main+0x2d8>)
 8000934:	f001 fc34 	bl	80021a0 <HAL_GPIO_WritePin>
  HAL_Delay(2000);
 8000938:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800093c:	f000 fb04 	bl	8000f48 <HAL_Delay>


  TxHeader.StdId = MCS_SCRN_ADDR;
 8000940:	4bab      	ldr	r3, [pc, #684]	; (8000bf0 <main+0x2dc>)
 8000942:	224a      	movs	r2, #74	; 0x4a
 8000944:	601a      	str	r2, [r3, #0]

  uint8_t data_length = 2;
 8000946:	2302      	movs	r3, #2
 8000948:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  uint8_t data_map_frame[2] = {MAP_ID, can_map_value};
 800094c:	23c3      	movs	r3, #195	; 0xc3
 800094e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8000952:	4ba8      	ldr	r3, [pc, #672]	; (8000bf4 <main+0x2e0>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

  uint8_t data_tc_frame[2] = {TC_ID, can_tc_value};
 800095a:	23d3      	movs	r3, #211	; 0xd3
 800095c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8000960:	4ba5      	ldr	r3, [pc, #660]	; (8000bf8 <main+0x2e4>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

  uint8_t data_speed_frame[2] = {SPEED_ID, can_speed_value};
 8000968:	23e3      	movs	r3, #227	; 0xe3
 800096a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800096e:	4ba3      	ldr	r3, [pc, #652]	; (8000bfc <main+0x2e8>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

  uint8_t data_diff_frame[2] = {DIFF_ID, can_diff_value};
 8000976:	23f3      	movs	r3, #243	; 0xf3
 8000978:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800097c:	4ba0      	ldr	r3, [pc, #640]	; (8000c00 <main+0x2ec>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

  uint8_t data_ts_frame[2] = {TS_ID, can_ts_value};
 8000984:	23f4      	movs	r3, #244	; 0xf4
 8000986:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800098a:	4b9e      	ldr	r3, [pc, #632]	; (8000c04 <main+0x2f0>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  uint8_t data_leng_frame[2] = {LENG_ID, can_leng_value};
 8000992:	23f5      	movs	r3, #245	; 0xf5
 8000994:	f887 3020 	strb.w	r3, [r7, #32]
 8000998:	4b9b      	ldr	r3, [pc, #620]	; (8000c08 <main+0x2f4>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

  uint8_t data_linv_frame[2] = {LINV_ID, can_linv_value};
 80009a0:	23f6      	movs	r3, #246	; 0xf6
 80009a2:	773b      	strb	r3, [r7, #28]
 80009a4:	4b99      	ldr	r3, [pc, #612]	; (8000c0c <main+0x2f8>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	777b      	strb	r3, [r7, #29]

  uint8_t data_bat_frame[2] = {BAT_ID, can_bat_value};
 80009aa:	23f7      	movs	r3, #247	; 0xf7
 80009ac:	763b      	strb	r3, [r7, #24]
 80009ae:	4b98      	ldr	r3, [pc, #608]	; (8000c10 <main+0x2fc>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	767b      	strb	r3, [r7, #25]

  uint8_t data_rinv_frame[2] = {RINV_ID, can_rinv_value};
 80009b4:	23f8      	movs	r3, #248	; 0xf8
 80009b6:	753b      	strb	r3, [r7, #20]
 80009b8:	4b96      	ldr	r3, [pc, #600]	; (8000c14 <main+0x300>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	757b      	strb	r3, [r7, #21]

  uint8_t data_reng_frame[2] = {RENG_ID, can_reng_value};
 80009be:	23f9      	movs	r3, #249	; 0xf9
 80009c0:	743b      	strb	r3, [r7, #16]
 80009c2:	4b95      	ldr	r3, [pc, #596]	; (8000c18 <main+0x304>)
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	747b      	strb	r3, [r7, #17]

  uint8_t data_err_frame[2] = {ERR_ID, can_err_value};
 80009c8:	23fa      	movs	r3, #250	; 0xfa
 80009ca:	733b      	strb	r3, [r7, #12]
 80009cc:	4b93      	ldr	r3, [pc, #588]	; (8000c1c <main+0x308>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	737b      	strb	r3, [r7, #13]

  uint8_t data_hv_frame[2] = {HV_ID, can_hv_value};
 80009d2:	23fb      	movs	r3, #251	; 0xfb
 80009d4:	723b      	strb	r3, [r7, #8]
 80009d6:	4b92      	ldr	r3, [pc, #584]	; (8000c20 <main+0x30c>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	727b      	strb	r3, [r7, #9]

  uint8_t data_low_frame[2] = {LOW_ID, can_low_value};
 80009dc:	23fc      	movs	r3, #252	; 0xfc
 80009de:	713b      	strb	r3, [r7, #4]
 80009e0:	4b90      	ldr	r3, [pc, #576]	; (8000c24 <main+0x310>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	717b      	strb	r3, [r7, #5]

  while (1)
  {
	  data_map_frame[1] += 5;
 80009e6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80009ea:	3305      	adds	r3, #5
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	  CAN_Transmit(&TxHeader, data_length, data_map_frame, &TxMailbox);
 80009f2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80009f6:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 80009fa:	4b8b      	ldr	r3, [pc, #556]	; (8000c28 <main+0x314>)
 80009fc:	487c      	ldr	r0, [pc, #496]	; (8000bf0 <main+0x2dc>)
 80009fe:	f7ff feb3 	bl	8000768 <CAN_Transmit>
	  HAL_GPIO_TogglePin(internalLED_GPIO_Port, internalLED_Pin);
 8000a02:	2120      	movs	r1, #32
 8000a04:	4879      	ldr	r0, [pc, #484]	; (8000bec <main+0x2d8>)
 8000a06:	f001 fbe4 	bl	80021d2 <HAL_GPIO_TogglePin>
	  HAL_Delay(delay_t);
 8000a0a:	2011      	movs	r0, #17
 8000a0c:	f000 fa9c 	bl	8000f48 <HAL_Delay>

	  --data_tc_frame[1];
 8000a10:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000a14:	3b01      	subs	r3, #1
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	  CAN_Transmit(&TxHeader, data_length, data_tc_frame, &TxMailbox);
 8000a1c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000a20:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8000a24:	4b80      	ldr	r3, [pc, #512]	; (8000c28 <main+0x314>)
 8000a26:	4872      	ldr	r0, [pc, #456]	; (8000bf0 <main+0x2dc>)
 8000a28:	f7ff fe9e 	bl	8000768 <CAN_Transmit>
	  HAL_GPIO_TogglePin(internalLED_GPIO_Port, internalLED_Pin);
 8000a2c:	2120      	movs	r1, #32
 8000a2e:	486f      	ldr	r0, [pc, #444]	; (8000bec <main+0x2d8>)
 8000a30:	f001 fbcf 	bl	80021d2 <HAL_GPIO_TogglePin>
	  HAL_Delay(delay_t);
 8000a34:	2011      	movs	r0, #17
 8000a36:	f000 fa87 	bl	8000f48 <HAL_Delay>

	  data_speed_frame[1]++;
 8000a3a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000a3e:	3301      	adds	r3, #1
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	  CAN_Transmit(&TxHeader, data_length, data_speed_frame, &TxMailbox);
 8000a46:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000a4a:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8000a4e:	4b76      	ldr	r3, [pc, #472]	; (8000c28 <main+0x314>)
 8000a50:	4867      	ldr	r0, [pc, #412]	; (8000bf0 <main+0x2dc>)
 8000a52:	f7ff fe89 	bl	8000768 <CAN_Transmit>
	  HAL_GPIO_TogglePin(internalLED_GPIO_Port, internalLED_Pin);
 8000a56:	2120      	movs	r1, #32
 8000a58:	4864      	ldr	r0, [pc, #400]	; (8000bec <main+0x2d8>)
 8000a5a:	f001 fbba 	bl	80021d2 <HAL_GPIO_TogglePin>
	  HAL_Delay(delay_t);
 8000a5e:	2011      	movs	r0, #17
 8000a60:	f000 fa72 	bl	8000f48 <HAL_Delay>

	  data_diff_frame[1] += 12;
 8000a64:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000a68:	330c      	adds	r3, #12
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	  CAN_Transmit(&TxHeader, data_length, data_diff_frame, &TxMailbox);
 8000a70:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000a74:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8000a78:	4b6b      	ldr	r3, [pc, #428]	; (8000c28 <main+0x314>)
 8000a7a:	485d      	ldr	r0, [pc, #372]	; (8000bf0 <main+0x2dc>)
 8000a7c:	f7ff fe74 	bl	8000768 <CAN_Transmit>
	  HAL_GPIO_TogglePin(internalLED_GPIO_Port, internalLED_Pin);
 8000a80:	2120      	movs	r1, #32
 8000a82:	485a      	ldr	r0, [pc, #360]	; (8000bec <main+0x2d8>)
 8000a84:	f001 fba5 	bl	80021d2 <HAL_GPIO_TogglePin>
	  HAL_Delay(delay_t);
 8000a88:	2011      	movs	r0, #17
 8000a8a:	f000 fa5d 	bl	8000f48 <HAL_Delay>

	  data_ts_frame[1] -= 12;
 8000a8e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000a92:	3b0c      	subs	r3, #12
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	  CAN_Transmit(&TxHeader, data_length, data_ts_frame, &TxMailbox);
 8000a9a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000a9e:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8000aa2:	4b61      	ldr	r3, [pc, #388]	; (8000c28 <main+0x314>)
 8000aa4:	4852      	ldr	r0, [pc, #328]	; (8000bf0 <main+0x2dc>)
 8000aa6:	f7ff fe5f 	bl	8000768 <CAN_Transmit>
	  HAL_GPIO_TogglePin(internalLED_GPIO_Port, internalLED_Pin);
 8000aaa:	2120      	movs	r1, #32
 8000aac:	484f      	ldr	r0, [pc, #316]	; (8000bec <main+0x2d8>)
 8000aae:	f001 fb90 	bl	80021d2 <HAL_GPIO_TogglePin>
	  HAL_Delay(delay_t);
 8000ab2:	2011      	movs	r0, #17
 8000ab4:	f000 fa48 	bl	8000f48 <HAL_Delay>

	  data_leng_frame[1] += 4;
 8000ab8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000abc:	3304      	adds	r3, #4
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	  CAN_Transmit(&TxHeader, data_length, data_leng_frame, &TxMailbox);
 8000ac4:	f107 0220 	add.w	r2, r7, #32
 8000ac8:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8000acc:	4b56      	ldr	r3, [pc, #344]	; (8000c28 <main+0x314>)
 8000ace:	4848      	ldr	r0, [pc, #288]	; (8000bf0 <main+0x2dc>)
 8000ad0:	f7ff fe4a 	bl	8000768 <CAN_Transmit>
	  HAL_GPIO_TogglePin(internalLED_GPIO_Port, internalLED_Pin);
 8000ad4:	2120      	movs	r1, #32
 8000ad6:	4845      	ldr	r0, [pc, #276]	; (8000bec <main+0x2d8>)
 8000ad8:	f001 fb7b 	bl	80021d2 <HAL_GPIO_TogglePin>
	  HAL_Delay(delay_t);
 8000adc:	2011      	movs	r0, #17
 8000ade:	f000 fa33 	bl	8000f48 <HAL_Delay>

	  data_linv_frame[1] -= 2;
 8000ae2:	7f7b      	ldrb	r3, [r7, #29]
 8000ae4:	3b02      	subs	r3, #2
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	777b      	strb	r3, [r7, #29]
	  CAN_Transmit(&TxHeader, data_length, data_linv_frame, &TxMailbox);
 8000aea:	f107 021c 	add.w	r2, r7, #28
 8000aee:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8000af2:	4b4d      	ldr	r3, [pc, #308]	; (8000c28 <main+0x314>)
 8000af4:	483e      	ldr	r0, [pc, #248]	; (8000bf0 <main+0x2dc>)
 8000af6:	f7ff fe37 	bl	8000768 <CAN_Transmit>
	  HAL_GPIO_TogglePin(internalLED_GPIO_Port, internalLED_Pin);
 8000afa:	2120      	movs	r1, #32
 8000afc:	483b      	ldr	r0, [pc, #236]	; (8000bec <main+0x2d8>)
 8000afe:	f001 fb68 	bl	80021d2 <HAL_GPIO_TogglePin>
	  HAL_Delay(delay_t);
 8000b02:	2011      	movs	r0, #17
 8000b04:	f000 fa20 	bl	8000f48 <HAL_Delay>

	  data_bat_frame[1] += 8;
 8000b08:	7e7b      	ldrb	r3, [r7, #25]
 8000b0a:	3308      	adds	r3, #8
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	767b      	strb	r3, [r7, #25]
	  CAN_Transmit(&TxHeader, data_length, data_bat_frame, &TxMailbox);
 8000b10:	f107 0218 	add.w	r2, r7, #24
 8000b14:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8000b18:	4b43      	ldr	r3, [pc, #268]	; (8000c28 <main+0x314>)
 8000b1a:	4835      	ldr	r0, [pc, #212]	; (8000bf0 <main+0x2dc>)
 8000b1c:	f7ff fe24 	bl	8000768 <CAN_Transmit>
	  HAL_GPIO_TogglePin(internalLED_GPIO_Port, internalLED_Pin);
 8000b20:	2120      	movs	r1, #32
 8000b22:	4832      	ldr	r0, [pc, #200]	; (8000bec <main+0x2d8>)
 8000b24:	f001 fb55 	bl	80021d2 <HAL_GPIO_TogglePin>
	  HAL_Delay(delay_t);
 8000b28:	2011      	movs	r0, #17
 8000b2a:	f000 fa0d 	bl	8000f48 <HAL_Delay>

	  data_rinv_frame[1] += 8;
 8000b2e:	7d7b      	ldrb	r3, [r7, #21]
 8000b30:	3308      	adds	r3, #8
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	757b      	strb	r3, [r7, #21]
	  CAN_Transmit(&TxHeader, data_length, data_rinv_frame, &TxMailbox);
 8000b36:	f107 0214 	add.w	r2, r7, #20
 8000b3a:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8000b3e:	4b3a      	ldr	r3, [pc, #232]	; (8000c28 <main+0x314>)
 8000b40:	482b      	ldr	r0, [pc, #172]	; (8000bf0 <main+0x2dc>)
 8000b42:	f7ff fe11 	bl	8000768 <CAN_Transmit>
	  HAL_GPIO_TogglePin(internalLED_GPIO_Port, internalLED_Pin);
 8000b46:	2120      	movs	r1, #32
 8000b48:	4828      	ldr	r0, [pc, #160]	; (8000bec <main+0x2d8>)
 8000b4a:	f001 fb42 	bl	80021d2 <HAL_GPIO_TogglePin>
	  HAL_Delay(delay_t);
 8000b4e:	2011      	movs	r0, #17
 8000b50:	f000 f9fa 	bl	8000f48 <HAL_Delay>

	  data_reng_frame[1] -= 1;
 8000b54:	7c7b      	ldrb	r3, [r7, #17]
 8000b56:	3b01      	subs	r3, #1
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	747b      	strb	r3, [r7, #17]
	  CAN_Transmit(&TxHeader, data_length, data_reng_frame, &TxMailbox);
 8000b5c:	f107 0210 	add.w	r2, r7, #16
 8000b60:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8000b64:	4b30      	ldr	r3, [pc, #192]	; (8000c28 <main+0x314>)
 8000b66:	4822      	ldr	r0, [pc, #136]	; (8000bf0 <main+0x2dc>)
 8000b68:	f7ff fdfe 	bl	8000768 <CAN_Transmit>
	  HAL_GPIO_TogglePin(internalLED_GPIO_Port, internalLED_Pin);
 8000b6c:	2120      	movs	r1, #32
 8000b6e:	481f      	ldr	r0, [pc, #124]	; (8000bec <main+0x2d8>)
 8000b70:	f001 fb2f 	bl	80021d2 <HAL_GPIO_TogglePin>
	  HAL_Delay(delay_t);
 8000b74:	2011      	movs	r0, #17
 8000b76:	f000 f9e7 	bl	8000f48 <HAL_Delay>

	  data_err_frame[1]++;
 8000b7a:	7b7b      	ldrb	r3, [r7, #13]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	737b      	strb	r3, [r7, #13]
	  CAN_Transmit(&TxHeader, data_length, data_err_frame, &TxMailbox);
 8000b82:	f107 020c 	add.w	r2, r7, #12
 8000b86:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8000b8a:	4b27      	ldr	r3, [pc, #156]	; (8000c28 <main+0x314>)
 8000b8c:	4818      	ldr	r0, [pc, #96]	; (8000bf0 <main+0x2dc>)
 8000b8e:	f7ff fdeb 	bl	8000768 <CAN_Transmit>
	  HAL_GPIO_TogglePin(internalLED_GPIO_Port, internalLED_Pin);
 8000b92:	2120      	movs	r1, #32
 8000b94:	4815      	ldr	r0, [pc, #84]	; (8000bec <main+0x2d8>)
 8000b96:	f001 fb1c 	bl	80021d2 <HAL_GPIO_TogglePin>
	  HAL_Delay(delay_t);
 8000b9a:	2011      	movs	r0, #17
 8000b9c:	f000 f9d4 	bl	8000f48 <HAL_Delay>

	  data_hv_frame[1]++;
 8000ba0:	7a7b      	ldrb	r3, [r7, #9]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	727b      	strb	r3, [r7, #9]
	  CAN_Transmit(&TxHeader, data_length, data_hv_frame, &TxMailbox);
 8000ba8:	f107 0208 	add.w	r2, r7, #8
 8000bac:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8000bb0:	4b1d      	ldr	r3, [pc, #116]	; (8000c28 <main+0x314>)
 8000bb2:	480f      	ldr	r0, [pc, #60]	; (8000bf0 <main+0x2dc>)
 8000bb4:	f7ff fdd8 	bl	8000768 <CAN_Transmit>
	  HAL_GPIO_TogglePin(internalLED_GPIO_Port, internalLED_Pin);
 8000bb8:	2120      	movs	r1, #32
 8000bba:	480c      	ldr	r0, [pc, #48]	; (8000bec <main+0x2d8>)
 8000bbc:	f001 fb09 	bl	80021d2 <HAL_GPIO_TogglePin>
	  HAL_Delay(delay_t);
 8000bc0:	2011      	movs	r0, #17
 8000bc2:	f000 f9c1 	bl	8000f48 <HAL_Delay>

	  data_low_frame[1]++;
 8000bc6:	797b      	ldrb	r3, [r7, #5]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	717b      	strb	r3, [r7, #5]
	  CAN_Transmit(&TxHeader, data_length, data_low_frame, &TxMailbox);
 8000bce:	1d3a      	adds	r2, r7, #4
 8000bd0:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8000bd4:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <main+0x314>)
 8000bd6:	4806      	ldr	r0, [pc, #24]	; (8000bf0 <main+0x2dc>)
 8000bd8:	f7ff fdc6 	bl	8000768 <CAN_Transmit>
	  HAL_GPIO_TogglePin(internalLED_GPIO_Port, internalLED_Pin);
 8000bdc:	2120      	movs	r1, #32
 8000bde:	4803      	ldr	r0, [pc, #12]	; (8000bec <main+0x2d8>)
 8000be0:	f001 faf7 	bl	80021d2 <HAL_GPIO_TogglePin>
	  HAL_Delay(delay_t);
 8000be4:	2011      	movs	r0, #17
 8000be6:	f000 f9af 	bl	8000f48 <HAL_Delay>
	  data_map_frame[1] += 5;
 8000bea:	e6fc      	b.n	80009e6 <main+0xd2>
 8000bec:	40020000 	.word	0x40020000
 8000bf0:	200000e4 	.word	0x200000e4
 8000bf4:	20000060 	.word	0x20000060
 8000bf8:	20000061 	.word	0x20000061
 8000bfc:	20000062 	.word	0x20000062
 8000c00:	20000063 	.word	0x20000063
 8000c04:	20000064 	.word	0x20000064
 8000c08:	20000065 	.word	0x20000065
 8000c0c:	20000066 	.word	0x20000066
 8000c10:	20000067 	.word	0x20000067
 8000c14:	20000068 	.word	0x20000068
 8000c18:	20000069 	.word	0x20000069
 8000c1c:	2000012c 	.word	0x2000012c
 8000c20:	2000012d 	.word	0x2000012d
 8000c24:	2000012e 	.word	0x2000012e
 8000c28:	20000128 	.word	0x20000128

08000c2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b094      	sub	sp, #80	; 0x50
 8000c30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c32:	f107 031c 	add.w	r3, r7, #28
 8000c36:	2234      	movs	r2, #52	; 0x34
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f002 f836 	bl	8002cac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c40:	f107 0308 	add.w	r3, r7, #8
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c50:	2300      	movs	r3, #0
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	4b23      	ldr	r3, [pc, #140]	; (8000ce4 <SystemClock_Config+0xb8>)
 8000c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c58:	4a22      	ldr	r2, [pc, #136]	; (8000ce4 <SystemClock_Config+0xb8>)
 8000c5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c60:	4b20      	ldr	r3, [pc, #128]	; (8000ce4 <SystemClock_Config+0xb8>)
 8000c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c68:	607b      	str	r3, [r7, #4]
 8000c6a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	603b      	str	r3, [r7, #0]
 8000c70:	4b1d      	ldr	r3, [pc, #116]	; (8000ce8 <SystemClock_Config+0xbc>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c78:	4a1b      	ldr	r2, [pc, #108]	; (8000ce8 <SystemClock_Config+0xbc>)
 8000c7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c7e:	6013      	str	r3, [r2, #0]
 8000c80:	4b19      	ldr	r3, [pc, #100]	; (8000ce8 <SystemClock_Config+0xbc>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c88:	603b      	str	r3, [r7, #0]
 8000c8a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c90:	2301      	movs	r3, #1
 8000c92:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c94:	2310      	movs	r3, #16
 8000c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c9c:	f107 031c 	add.w	r3, r7, #28
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f001 fd41 	bl	8002728 <HAL_RCC_OscConfig>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000cac:	f000 f81e 	bl	8000cec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cb0:	230f      	movs	r3, #15
 8000cb2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cc4:	f107 0308 	add.w	r3, r7, #8
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f001 fa9c 	bl	8002208 <HAL_RCC_ClockConfig>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000cd6:	f000 f809 	bl	8000cec <Error_Handler>
  }
}
 8000cda:	bf00      	nop
 8000cdc:	3750      	adds	r7, #80	; 0x50
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40007000 	.word	0x40007000

08000cec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf0:	b672      	cpsid	i
}
 8000cf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cf4:	e7fe      	b.n	8000cf4 <Error_Handler+0x8>
	...

08000cf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	607b      	str	r3, [r7, #4]
 8000d02:	4b10      	ldr	r3, [pc, #64]	; (8000d44 <HAL_MspInit+0x4c>)
 8000d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d06:	4a0f      	ldr	r2, [pc, #60]	; (8000d44 <HAL_MspInit+0x4c>)
 8000d08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d0e:	4b0d      	ldr	r3, [pc, #52]	; (8000d44 <HAL_MspInit+0x4c>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d16:	607b      	str	r3, [r7, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	603b      	str	r3, [r7, #0]
 8000d1e:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <HAL_MspInit+0x4c>)
 8000d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d22:	4a08      	ldr	r2, [pc, #32]	; (8000d44 <HAL_MspInit+0x4c>)
 8000d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d28:	6413      	str	r3, [r2, #64]	; 0x40
 8000d2a:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <HAL_MspInit+0x4c>)
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d32:	603b      	str	r3, [r7, #0]
 8000d34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d36:	bf00      	nop
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	40023800 	.word	0x40023800

08000d48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <NMI_Handler+0x4>

08000d4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d52:	e7fe      	b.n	8000d52 <HardFault_Handler+0x4>

08000d54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <MemManage_Handler+0x4>

08000d5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d5e:	e7fe      	b.n	8000d5e <BusFault_Handler+0x4>

08000d60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <UsageFault_Handler+0x4>

08000d66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d94:	f000 f8b8 	bl	8000f08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d98:	bf00      	nop
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000da0:	4802      	ldr	r0, [pc, #8]	; (8000dac <CAN1_TX_IRQHandler+0x10>)
 8000da2:	f000 fd28 	bl	80017f6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000094 	.word	0x20000094

08000db0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000db4:	4802      	ldr	r0, [pc, #8]	; (8000dc0 <CAN1_RX0_IRQHandler+0x10>)
 8000db6:	f000 fd1e 	bl	80017f6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000094 	.word	0x20000094

08000dc4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000dc8:	4802      	ldr	r0, [pc, #8]	; (8000dd4 <CAN1_RX1_IRQHandler+0x10>)
 8000dca:	f000 fd14 	bl	80017f6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000094 	.word	0x20000094

08000dd8 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000ddc:	4802      	ldr	r0, [pc, #8]	; (8000de8 <CAN1_SCE_IRQHandler+0x10>)
 8000dde:	f000 fd0a 	bl	80017f6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000094 	.word	0x20000094

08000dec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <SystemInit+0x20>)
 8000df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000df6:	4a05      	ldr	r2, [pc, #20]	; (8000e0c <SystemInit+0x20>)
 8000df8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e48 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e14:	480d      	ldr	r0, [pc, #52]	; (8000e4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e16:	490e      	ldr	r1, [pc, #56]	; (8000e50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e18:	4a0e      	ldr	r2, [pc, #56]	; (8000e54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e1c:	e002      	b.n	8000e24 <LoopCopyDataInit>

08000e1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e22:	3304      	adds	r3, #4

08000e24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e28:	d3f9      	bcc.n	8000e1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e2a:	4a0b      	ldr	r2, [pc, #44]	; (8000e58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e2c:	4c0b      	ldr	r4, [pc, #44]	; (8000e5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e30:	e001      	b.n	8000e36 <LoopFillZerobss>

08000e32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e34:	3204      	adds	r2, #4

08000e36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e38:	d3fb      	bcc.n	8000e32 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e3a:	f7ff ffd7 	bl	8000dec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e3e:	f001 ff11 	bl	8002c64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e42:	f7ff fd67 	bl	8000914 <main>
  bx  lr    
 8000e46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e50:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000e54:	08002cf4 	.word	0x08002cf4
  ldr r2, =_sbss
 8000e58:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000e5c:	20000134 	.word	0x20000134

08000e60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e60:	e7fe      	b.n	8000e60 <ADC_IRQHandler>
	...

08000e64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e68:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <HAL_Init+0x40>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a0d      	ldr	r2, [pc, #52]	; (8000ea4 <HAL_Init+0x40>)
 8000e6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e74:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <HAL_Init+0x40>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a0a      	ldr	r2, [pc, #40]	; (8000ea4 <HAL_Init+0x40>)
 8000e7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e80:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <HAL_Init+0x40>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a07      	ldr	r2, [pc, #28]	; (8000ea4 <HAL_Init+0x40>)
 8000e86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e8c:	2003      	movs	r0, #3
 8000e8e:	f000 ffb1 	bl	8001df4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e92:	200f      	movs	r0, #15
 8000e94:	f000 f808 	bl	8000ea8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e98:	f7ff ff2e 	bl	8000cf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e9c:	2300      	movs	r3, #0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40023c00 	.word	0x40023c00

08000ea8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eb0:	4b12      	ldr	r3, [pc, #72]	; (8000efc <HAL_InitTick+0x54>)
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <HAL_InitTick+0x58>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	4619      	mov	r1, r3
 8000eba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ebe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f000 ffc9 	bl	8001e5e <HAL_SYSTICK_Config>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e00e      	b.n	8000ef4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2b0f      	cmp	r3, #15
 8000eda:	d80a      	bhi.n	8000ef2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000edc:	2200      	movs	r2, #0
 8000ede:	6879      	ldr	r1, [r7, #4]
 8000ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee4:	f000 ff91 	bl	8001e0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ee8:	4a06      	ldr	r2, [pc, #24]	; (8000f04 <HAL_InitTick+0x5c>)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	e000      	b.n	8000ef4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	2000006c 	.word	0x2000006c
 8000f00:	20000074 	.word	0x20000074
 8000f04:	20000070 	.word	0x20000070

08000f08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f0c:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <HAL_IncTick+0x20>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	461a      	mov	r2, r3
 8000f12:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <HAL_IncTick+0x24>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4413      	add	r3, r2
 8000f18:	4a04      	ldr	r2, [pc, #16]	; (8000f2c <HAL_IncTick+0x24>)
 8000f1a:	6013      	str	r3, [r2, #0]
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	20000074 	.word	0x20000074
 8000f2c:	20000130 	.word	0x20000130

08000f30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  return uwTick;
 8000f34:	4b03      	ldr	r3, [pc, #12]	; (8000f44 <HAL_GetTick+0x14>)
 8000f36:	681b      	ldr	r3, [r3, #0]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	20000130 	.word	0x20000130

08000f48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f50:	f7ff ffee 	bl	8000f30 <HAL_GetTick>
 8000f54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f60:	d005      	beq.n	8000f6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f62:	4b0a      	ldr	r3, [pc, #40]	; (8000f8c <HAL_Delay+0x44>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	461a      	mov	r2, r3
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f6e:	bf00      	nop
 8000f70:	f7ff ffde 	bl	8000f30 <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d8f7      	bhi.n	8000f70 <HAL_Delay+0x28>
  {
  }
}
 8000f80:	bf00      	nop
 8000f82:	bf00      	nop
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000074 	.word	0x20000074

08000f90 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d101      	bne.n	8000fa2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e0ed      	b.n	800117e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d102      	bne.n	8000fb4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f7ff fae0 	bl	8000574 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f042 0201 	orr.w	r2, r2, #1
 8000fc2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fc4:	f7ff ffb4 	bl	8000f30 <HAL_GetTick>
 8000fc8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000fca:	e012      	b.n	8000ff2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000fcc:	f7ff ffb0 	bl	8000f30 <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	2b0a      	cmp	r3, #10
 8000fd8:	d90b      	bls.n	8000ff2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fde:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2205      	movs	r2, #5
 8000fea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e0c5      	b.n	800117e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 0301 	and.w	r3, r3, #1
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d0e5      	beq.n	8000fcc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f022 0202 	bic.w	r2, r2, #2
 800100e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001010:	f7ff ff8e 	bl	8000f30 <HAL_GetTick>
 8001014:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001016:	e012      	b.n	800103e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001018:	f7ff ff8a 	bl	8000f30 <HAL_GetTick>
 800101c:	4602      	mov	r2, r0
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	2b0a      	cmp	r3, #10
 8001024:	d90b      	bls.n	800103e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2205      	movs	r2, #5
 8001036:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e09f      	b.n	800117e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 0302 	and.w	r3, r3, #2
 8001048:	2b00      	cmp	r3, #0
 800104a:	d1e5      	bne.n	8001018 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	7e1b      	ldrb	r3, [r3, #24]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d108      	bne.n	8001066 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	e007      	b.n	8001076 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001074:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	7e5b      	ldrb	r3, [r3, #25]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d108      	bne.n	8001090 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	e007      	b.n	80010a0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800109e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	7e9b      	ldrb	r3, [r3, #26]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d108      	bne.n	80010ba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f042 0220 	orr.w	r2, r2, #32
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	e007      	b.n	80010ca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f022 0220 	bic.w	r2, r2, #32
 80010c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	7edb      	ldrb	r3, [r3, #27]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d108      	bne.n	80010e4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f022 0210 	bic.w	r2, r2, #16
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	e007      	b.n	80010f4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f042 0210 	orr.w	r2, r2, #16
 80010f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	7f1b      	ldrb	r3, [r3, #28]
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d108      	bne.n	800110e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f042 0208 	orr.w	r2, r2, #8
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	e007      	b.n	800111e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f022 0208 	bic.w	r2, r2, #8
 800111c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	7f5b      	ldrb	r3, [r3, #29]
 8001122:	2b01      	cmp	r3, #1
 8001124:	d108      	bne.n	8001138 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f042 0204 	orr.w	r2, r2, #4
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	e007      	b.n	8001148 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f022 0204 	bic.w	r2, r2, #4
 8001146:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	689a      	ldr	r2, [r3, #8]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	431a      	orrs	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	691b      	ldr	r3, [r3, #16]
 8001156:	431a      	orrs	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	695b      	ldr	r3, [r3, #20]
 800115c:	ea42 0103 	orr.w	r1, r2, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	1e5a      	subs	r2, r3, #1
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	430a      	orrs	r2, r1
 800116c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2201      	movs	r2, #1
 8001178:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
	...

08001188 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001188:	b480      	push	{r7}
 800118a:	b087      	sub	sp, #28
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800119e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80011a0:	7cfb      	ldrb	r3, [r7, #19]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d003      	beq.n	80011ae <HAL_CAN_ConfigFilter+0x26>
 80011a6:	7cfb      	ldrb	r3, [r7, #19]
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	f040 80be 	bne.w	800132a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80011ae:	4b65      	ldr	r3, [pc, #404]	; (8001344 <HAL_CAN_ConfigFilter+0x1bc>)
 80011b0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80011b8:	f043 0201 	orr.w	r2, r3, #1
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80011c8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011dc:	021b      	lsls	r3, r3, #8
 80011de:	431a      	orrs	r2, r3
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	695b      	ldr	r3, [r3, #20]
 80011ea:	f003 031f 	and.w	r3, r3, #31
 80011ee:	2201      	movs	r2, #1
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	43db      	mvns	r3, r3
 8001200:	401a      	ands	r2, r3
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	69db      	ldr	r3, [r3, #28]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d123      	bne.n	8001258 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	43db      	mvns	r3, r3
 800121a:	401a      	ands	r2, r3
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	68db      	ldr	r3, [r3, #12]
 8001226:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800122e:	683a      	ldr	r2, [r7, #0]
 8001230:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001232:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	3248      	adds	r2, #72	; 0x48
 8001238:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800124c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800124e:	6979      	ldr	r1, [r7, #20]
 8001250:	3348      	adds	r3, #72	; 0x48
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	440b      	add	r3, r1
 8001256:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	69db      	ldr	r3, [r3, #28]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d122      	bne.n	80012a6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	431a      	orrs	r2, r3
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800127c:	683a      	ldr	r2, [r7, #0]
 800127e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001280:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	3248      	adds	r2, #72	; 0x48
 8001286:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800129a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800129c:	6979      	ldr	r1, [r7, #20]
 800129e:	3348      	adds	r3, #72	; 0x48
 80012a0:	00db      	lsls	r3, r3, #3
 80012a2:	440b      	add	r3, r1
 80012a4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	699b      	ldr	r3, [r3, #24]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d109      	bne.n	80012c2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	43db      	mvns	r3, r3
 80012b8:	401a      	ands	r2, r3
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80012c0:	e007      	b.n	80012d2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	431a      	orrs	r2, r3
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	691b      	ldr	r3, [r3, #16]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d109      	bne.n	80012ee <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	43db      	mvns	r3, r3
 80012e4:	401a      	ands	r2, r3
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80012ec:	e007      	b.n	80012fe <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	431a      	orrs	r2, r3
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	6a1b      	ldr	r3, [r3, #32]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d107      	bne.n	8001316 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	431a      	orrs	r2, r3
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800131c:	f023 0201 	bic.w	r2, r3, #1
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001326:	2300      	movs	r3, #0
 8001328:	e006      	b.n	8001338 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
  }
}
 8001338:	4618      	mov	r0, r3
 800133a:	371c      	adds	r7, #28
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	40006400 	.word	0x40006400

08001348 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001356:	b2db      	uxtb	r3, r3
 8001358:	2b01      	cmp	r3, #1
 800135a:	d12e      	bne.n	80013ba <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2202      	movs	r2, #2
 8001360:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f022 0201 	bic.w	r2, r2, #1
 8001372:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001374:	f7ff fddc 	bl	8000f30 <HAL_GetTick>
 8001378:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800137a:	e012      	b.n	80013a2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800137c:	f7ff fdd8 	bl	8000f30 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b0a      	cmp	r3, #10
 8001388:	d90b      	bls.n	80013a2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2205      	movs	r2, #5
 800139a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e012      	b.n	80013c8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f003 0301 	and.w	r3, r3, #1
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1e5      	bne.n	800137c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2200      	movs	r2, #0
 80013b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80013b6:	2300      	movs	r3, #0
 80013b8:	e006      	b.n	80013c8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013be:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
  }
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b089      	sub	sp, #36	; 0x24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
 80013dc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013e4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80013ee:	7ffb      	ldrb	r3, [r7, #31]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d003      	beq.n	80013fc <HAL_CAN_AddTxMessage+0x2c>
 80013f4:	7ffb      	ldrb	r3, [r7, #31]
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	f040 80b8 	bne.w	800156c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d10a      	bne.n	800141c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800140c:	2b00      	cmp	r3, #0
 800140e:	d105      	bne.n	800141c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001416:	2b00      	cmp	r3, #0
 8001418:	f000 80a0 	beq.w	800155c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	0e1b      	lsrs	r3, r3, #24
 8001420:	f003 0303 	and.w	r3, r3, #3
 8001424:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	2b02      	cmp	r3, #2
 800142a:	d907      	bls.n	800143c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001430:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e09e      	b.n	800157a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800143c:	2201      	movs	r2, #1
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	409a      	lsls	r2, r3
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d10d      	bne.n	800146a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001458:	68f9      	ldr	r1, [r7, #12]
 800145a:	6809      	ldr	r1, [r1, #0]
 800145c:	431a      	orrs	r2, r3
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	3318      	adds	r3, #24
 8001462:	011b      	lsls	r3, r3, #4
 8001464:	440b      	add	r3, r1
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	e00f      	b.n	800148a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001474:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800147a:	68f9      	ldr	r1, [r7, #12]
 800147c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800147e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	3318      	adds	r3, #24
 8001484:	011b      	lsls	r3, r3, #4
 8001486:	440b      	add	r3, r1
 8001488:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	6819      	ldr	r1, [r3, #0]
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	691a      	ldr	r2, [r3, #16]
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	3318      	adds	r3, #24
 8001496:	011b      	lsls	r3, r3, #4
 8001498:	440b      	add	r3, r1
 800149a:	3304      	adds	r3, #4
 800149c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	7d1b      	ldrb	r3, [r3, #20]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d111      	bne.n	80014ca <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	3318      	adds	r3, #24
 80014ae:	011b      	lsls	r3, r3, #4
 80014b0:	4413      	add	r3, r2
 80014b2:	3304      	adds	r3, #4
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	68fa      	ldr	r2, [r7, #12]
 80014b8:	6811      	ldr	r1, [r2, #0]
 80014ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	3318      	adds	r3, #24
 80014c2:	011b      	lsls	r3, r3, #4
 80014c4:	440b      	add	r3, r1
 80014c6:	3304      	adds	r3, #4
 80014c8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	3307      	adds	r3, #7
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	061a      	lsls	r2, r3, #24
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	3306      	adds	r3, #6
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	041b      	lsls	r3, r3, #16
 80014da:	431a      	orrs	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3305      	adds	r3, #5
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	021b      	lsls	r3, r3, #8
 80014e4:	4313      	orrs	r3, r2
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	3204      	adds	r2, #4
 80014ea:	7812      	ldrb	r2, [r2, #0]
 80014ec:	4610      	mov	r0, r2
 80014ee:	68fa      	ldr	r2, [r7, #12]
 80014f0:	6811      	ldr	r1, [r2, #0]
 80014f2:	ea43 0200 	orr.w	r2, r3, r0
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	011b      	lsls	r3, r3, #4
 80014fa:	440b      	add	r3, r1
 80014fc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001500:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	3303      	adds	r3, #3
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	061a      	lsls	r2, r3, #24
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	3302      	adds	r3, #2
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	041b      	lsls	r3, r3, #16
 8001512:	431a      	orrs	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3301      	adds	r3, #1
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	021b      	lsls	r3, r3, #8
 800151c:	4313      	orrs	r3, r2
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	7812      	ldrb	r2, [r2, #0]
 8001522:	4610      	mov	r0, r2
 8001524:	68fa      	ldr	r2, [r7, #12]
 8001526:	6811      	ldr	r1, [r2, #0]
 8001528:	ea43 0200 	orr.w	r2, r3, r0
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	011b      	lsls	r3, r3, #4
 8001530:	440b      	add	r3, r1
 8001532:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001536:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	3318      	adds	r3, #24
 8001540:	011b      	lsls	r3, r3, #4
 8001542:	4413      	add	r3, r2
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	68fa      	ldr	r2, [r7, #12]
 8001548:	6811      	ldr	r1, [r2, #0]
 800154a:	f043 0201 	orr.w	r2, r3, #1
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	3318      	adds	r3, #24
 8001552:	011b      	lsls	r3, r3, #4
 8001554:	440b      	add	r3, r1
 8001556:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001558:	2300      	movs	r3, #0
 800155a:	e00e      	b.n	800157a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001560:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e006      	b.n	800157a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001570:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
  }
}
 800157a:	4618      	mov	r0, r3
 800157c:	3724      	adds	r7, #36	; 0x24
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr

08001586 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001586:	b480      	push	{r7}
 8001588:	b087      	sub	sp, #28
 800158a:	af00      	add	r7, sp, #0
 800158c:	60f8      	str	r0, [r7, #12]
 800158e:	60b9      	str	r1, [r7, #8]
 8001590:	607a      	str	r2, [r7, #4]
 8001592:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f893 3020 	ldrb.w	r3, [r3, #32]
 800159a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800159c:	7dfb      	ldrb	r3, [r7, #23]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d003      	beq.n	80015aa <HAL_CAN_GetRxMessage+0x24>
 80015a2:	7dfb      	ldrb	r3, [r7, #23]
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	f040 80f3 	bne.w	8001790 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d10e      	bne.n	80015ce <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	f003 0303 	and.w	r3, r3, #3
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d116      	bne.n	80015ec <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e0e7      	b.n	800179e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	691b      	ldr	r3, [r3, #16]
 80015d4:	f003 0303 	and.w	r3, r3, #3
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d107      	bne.n	80015ec <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e0d8      	b.n	800179e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	331b      	adds	r3, #27
 80015f4:	011b      	lsls	r3, r3, #4
 80015f6:	4413      	add	r3, r2
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0204 	and.w	r2, r3, #4
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d10c      	bne.n	8001624 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	331b      	adds	r3, #27
 8001612:	011b      	lsls	r3, r3, #4
 8001614:	4413      	add	r3, r2
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	0d5b      	lsrs	r3, r3, #21
 800161a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	e00b      	b.n	800163c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	331b      	adds	r3, #27
 800162c:	011b      	lsls	r3, r3, #4
 800162e:	4413      	add	r3, r2
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	08db      	lsrs	r3, r3, #3
 8001634:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	331b      	adds	r3, #27
 8001644:	011b      	lsls	r3, r3, #4
 8001646:	4413      	add	r3, r2
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0202 	and.w	r2, r3, #2
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	331b      	adds	r3, #27
 800165a:	011b      	lsls	r3, r3, #4
 800165c:	4413      	add	r3, r2
 800165e:	3304      	adds	r3, #4
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 020f 	and.w	r2, r3, #15
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	331b      	adds	r3, #27
 8001672:	011b      	lsls	r3, r3, #4
 8001674:	4413      	add	r3, r2
 8001676:	3304      	adds	r3, #4
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	0a1b      	lsrs	r3, r3, #8
 800167c:	b2da      	uxtb	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	331b      	adds	r3, #27
 800168a:	011b      	lsls	r3, r3, #4
 800168c:	4413      	add	r3, r2
 800168e:	3304      	adds	r3, #4
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	0c1b      	lsrs	r3, r3, #16
 8001694:	b29a      	uxth	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	011b      	lsls	r3, r3, #4
 80016a2:	4413      	add	r3, r2
 80016a4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	b2da      	uxtb	r2, r3
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	011b      	lsls	r3, r3, #4
 80016b8:	4413      	add	r3, r2
 80016ba:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	0a1a      	lsrs	r2, r3, #8
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	3301      	adds	r3, #1
 80016c6:	b2d2      	uxtb	r2, r2
 80016c8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	011b      	lsls	r3, r3, #4
 80016d2:	4413      	add	r3, r2
 80016d4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	0c1a      	lsrs	r2, r3, #16
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	3302      	adds	r3, #2
 80016e0:	b2d2      	uxtb	r2, r2
 80016e2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	011b      	lsls	r3, r3, #4
 80016ec:	4413      	add	r3, r2
 80016ee:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	0e1a      	lsrs	r2, r3, #24
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	3303      	adds	r3, #3
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	011b      	lsls	r3, r3, #4
 8001706:	4413      	add	r3, r2
 8001708:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	3304      	adds	r3, #4
 8001712:	b2d2      	uxtb	r2, r2
 8001714:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	011b      	lsls	r3, r3, #4
 800171e:	4413      	add	r3, r2
 8001720:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	0a1a      	lsrs	r2, r3, #8
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	3305      	adds	r3, #5
 800172c:	b2d2      	uxtb	r2, r2
 800172e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	011b      	lsls	r3, r3, #4
 8001738:	4413      	add	r3, r2
 800173a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	0c1a      	lsrs	r2, r3, #16
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	3306      	adds	r3, #6
 8001746:	b2d2      	uxtb	r2, r2
 8001748:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	011b      	lsls	r3, r3, #4
 8001752:	4413      	add	r3, r2
 8001754:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	0e1a      	lsrs	r2, r3, #24
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	3307      	adds	r3, #7
 8001760:	b2d2      	uxtb	r2, r2
 8001762:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d108      	bne.n	800177c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	68da      	ldr	r2, [r3, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f042 0220 	orr.w	r2, r2, #32
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	e007      	b.n	800178c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	691a      	ldr	r2, [r3, #16]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f042 0220 	orr.w	r2, r2, #32
 800178a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800178c:	2300      	movs	r3, #0
 800178e:	e006      	b.n	800179e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001794:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
  }
}
 800179e:	4618      	mov	r0, r3
 80017a0:	371c      	adds	r7, #28
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80017aa:	b480      	push	{r7}
 80017ac:	b085      	sub	sp, #20
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
 80017b2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017ba:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80017bc:	7bfb      	ldrb	r3, [r7, #15]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d002      	beq.n	80017c8 <HAL_CAN_ActivateNotification+0x1e>
 80017c2:	7bfb      	ldrb	r3, [r7, #15]
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d109      	bne.n	80017dc <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	6959      	ldr	r1, [r3, #20]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	683a      	ldr	r2, [r7, #0]
 80017d4:	430a      	orrs	r2, r1
 80017d6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80017d8:	2300      	movs	r3, #0
 80017da:	e006      	b.n	80017ea <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
  }
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3714      	adds	r7, #20
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b08a      	sub	sp, #40	; 0x28
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80017fe:	2300      	movs	r3, #0
 8001800:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	695b      	ldr	r3, [r3, #20]
 8001808:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	691b      	ldr	r3, [r3, #16]
 8001828:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001832:	6a3b      	ldr	r3, [r7, #32]
 8001834:	f003 0301 	and.w	r3, r3, #1
 8001838:	2b00      	cmp	r3, #0
 800183a:	d07c      	beq.n	8001936 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	2b00      	cmp	r3, #0
 8001844:	d023      	beq.n	800188e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2201      	movs	r2, #1
 800184c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	f003 0302 	and.w	r3, r3, #2
 8001854:	2b00      	cmp	r3, #0
 8001856:	d003      	beq.n	8001860 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f000 f983 	bl	8001b64 <HAL_CAN_TxMailbox0CompleteCallback>
 800185e:	e016      	b.n	800188e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	f003 0304 	and.w	r3, r3, #4
 8001866:	2b00      	cmp	r3, #0
 8001868:	d004      	beq.n	8001874 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800186a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001870:	627b      	str	r3, [r7, #36]	; 0x24
 8001872:	e00c      	b.n	800188e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	f003 0308 	and.w	r3, r3, #8
 800187a:	2b00      	cmp	r3, #0
 800187c:	d004      	beq.n	8001888 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800187e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001880:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001884:	627b      	str	r3, [r7, #36]	; 0x24
 8001886:	e002      	b.n	800188e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f000 f989 	bl	8001ba0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001894:	2b00      	cmp	r3, #0
 8001896:	d024      	beq.n	80018e2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018a0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d003      	beq.n	80018b4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f000 f963 	bl	8001b78 <HAL_CAN_TxMailbox1CompleteCallback>
 80018b2:	e016      	b.n	80018e2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d004      	beq.n	80018c8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018c4:	627b      	str	r3, [r7, #36]	; 0x24
 80018c6:	e00c      	b.n	80018e2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d004      	beq.n	80018dc <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80018d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24
 80018da:	e002      	b.n	80018e2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f000 f969 	bl	8001bb4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d024      	beq.n	8001936 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80018f4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d003      	beq.n	8001908 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f000 f943 	bl	8001b8c <HAL_CAN_TxMailbox2CompleteCallback>
 8001906:	e016      	b.n	8001936 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d004      	beq.n	800191c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001914:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001918:	627b      	str	r3, [r7, #36]	; 0x24
 800191a:	e00c      	b.n	8001936 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d004      	beq.n	8001930 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800192c:	627b      	str	r3, [r7, #36]	; 0x24
 800192e:	e002      	b.n	8001936 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f000 f949 	bl	8001bc8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001936:	6a3b      	ldr	r3, [r7, #32]
 8001938:	f003 0308 	and.w	r3, r3, #8
 800193c:	2b00      	cmp	r3, #0
 800193e:	d00c      	beq.n	800195a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	f003 0310 	and.w	r3, r3, #16
 8001946:	2b00      	cmp	r3, #0
 8001948:	d007      	beq.n	800195a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001950:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2210      	movs	r2, #16
 8001958:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800195a:	6a3b      	ldr	r3, [r7, #32]
 800195c:	f003 0304 	and.w	r3, r3, #4
 8001960:	2b00      	cmp	r3, #0
 8001962:	d00b      	beq.n	800197c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	f003 0308 	and.w	r3, r3, #8
 800196a:	2b00      	cmp	r3, #0
 800196c:	d006      	beq.n	800197c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2208      	movs	r2, #8
 8001974:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f000 f930 	bl	8001bdc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800197c:	6a3b      	ldr	r3, [r7, #32]
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d009      	beq.n	800199a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	f003 0303 	and.w	r3, r3, #3
 8001990:	2b00      	cmp	r3, #0
 8001992:	d002      	beq.n	800199a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f7fe fead 	bl	80006f4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800199a:	6a3b      	ldr	r3, [r7, #32]
 800199c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d00c      	beq.n	80019be <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	f003 0310 	and.w	r3, r3, #16
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d007      	beq.n	80019be <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80019ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2210      	movs	r2, #16
 80019bc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80019be:	6a3b      	ldr	r3, [r7, #32]
 80019c0:	f003 0320 	and.w	r3, r3, #32
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d00b      	beq.n	80019e0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	f003 0308 	and.w	r3, r3, #8
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d006      	beq.n	80019e0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2208      	movs	r2, #8
 80019d8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f000 f912 	bl	8001c04 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80019e0:	6a3b      	ldr	r3, [r7, #32]
 80019e2:	f003 0310 	and.w	r3, r3, #16
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d009      	beq.n	80019fe <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	691b      	ldr	r3, [r3, #16]
 80019f0:	f003 0303 	and.w	r3, r3, #3
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d002      	beq.n	80019fe <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f000 f8f9 	bl	8001bf0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80019fe:	6a3b      	ldr	r3, [r7, #32]
 8001a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d00b      	beq.n	8001a20 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	f003 0310 	and.w	r3, r3, #16
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d006      	beq.n	8001a20 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2210      	movs	r2, #16
 8001a18:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f000 f8fc 	bl	8001c18 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001a20:	6a3b      	ldr	r3, [r7, #32]
 8001a22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d00b      	beq.n	8001a42 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	f003 0308 	and.w	r3, r3, #8
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d006      	beq.n	8001a42 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2208      	movs	r2, #8
 8001a3a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f000 f8f5 	bl	8001c2c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001a42:	6a3b      	ldr	r3, [r7, #32]
 8001a44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d07b      	beq.n	8001b44 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	f003 0304 	and.w	r3, r3, #4
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d072      	beq.n	8001b3c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001a56:	6a3b      	ldr	r3, [r7, #32]
 8001a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d008      	beq.n	8001a72 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001a72:	6a3b      	ldr	r3, [r7, #32]
 8001a74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d008      	beq.n	8001a8e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d003      	beq.n	8001a8e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a88:	f043 0302 	orr.w	r3, r3, #2
 8001a8c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001a8e:	6a3b      	ldr	r3, [r7, #32]
 8001a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d008      	beq.n	8001aaa <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa4:	f043 0304 	orr.w	r3, r3, #4
 8001aa8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001aaa:	6a3b      	ldr	r3, [r7, #32]
 8001aac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d043      	beq.n	8001b3c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d03e      	beq.n	8001b3c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ac4:	2b60      	cmp	r3, #96	; 0x60
 8001ac6:	d02b      	beq.n	8001b20 <HAL_CAN_IRQHandler+0x32a>
 8001ac8:	2b60      	cmp	r3, #96	; 0x60
 8001aca:	d82e      	bhi.n	8001b2a <HAL_CAN_IRQHandler+0x334>
 8001acc:	2b50      	cmp	r3, #80	; 0x50
 8001ace:	d022      	beq.n	8001b16 <HAL_CAN_IRQHandler+0x320>
 8001ad0:	2b50      	cmp	r3, #80	; 0x50
 8001ad2:	d82a      	bhi.n	8001b2a <HAL_CAN_IRQHandler+0x334>
 8001ad4:	2b40      	cmp	r3, #64	; 0x40
 8001ad6:	d019      	beq.n	8001b0c <HAL_CAN_IRQHandler+0x316>
 8001ad8:	2b40      	cmp	r3, #64	; 0x40
 8001ada:	d826      	bhi.n	8001b2a <HAL_CAN_IRQHandler+0x334>
 8001adc:	2b30      	cmp	r3, #48	; 0x30
 8001ade:	d010      	beq.n	8001b02 <HAL_CAN_IRQHandler+0x30c>
 8001ae0:	2b30      	cmp	r3, #48	; 0x30
 8001ae2:	d822      	bhi.n	8001b2a <HAL_CAN_IRQHandler+0x334>
 8001ae4:	2b10      	cmp	r3, #16
 8001ae6:	d002      	beq.n	8001aee <HAL_CAN_IRQHandler+0x2f8>
 8001ae8:	2b20      	cmp	r3, #32
 8001aea:	d005      	beq.n	8001af8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001aec:	e01d      	b.n	8001b2a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af0:	f043 0308 	orr.w	r3, r3, #8
 8001af4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001af6:	e019      	b.n	8001b2c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afa:	f043 0310 	orr.w	r3, r3, #16
 8001afe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b00:	e014      	b.n	8001b2c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b04:	f043 0320 	orr.w	r3, r3, #32
 8001b08:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b0a:	e00f      	b.n	8001b2c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b12:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b14:	e00a      	b.n	8001b2c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b1c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b1e:	e005      	b.n	8001b2c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b26:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b28:	e000      	b.n	8001b2c <HAL_CAN_IRQHandler+0x336>
            break;
 8001b2a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	699a      	ldr	r2, [r3, #24]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001b3a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2204      	movs	r2, #4
 8001b42:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d008      	beq.n	8001b5c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b50:	431a      	orrs	r2, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 f872 	bl	8001c40 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001b5c:	bf00      	nop
 8001b5e:	3728      	adds	r7, #40	; 0x28
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001c48:	bf00      	nop
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f003 0307 	and.w	r3, r3, #7
 8001c62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c64:	4b0c      	ldr	r3, [pc, #48]	; (8001c98 <__NVIC_SetPriorityGrouping+0x44>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c6a:	68ba      	ldr	r2, [r7, #8]
 8001c6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c70:	4013      	ands	r3, r2
 8001c72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c86:	4a04      	ldr	r2, [pc, #16]	; (8001c98 <__NVIC_SetPriorityGrouping+0x44>)
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	60d3      	str	r3, [r2, #12]
}
 8001c8c:	bf00      	nop
 8001c8e:	3714      	adds	r7, #20
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ca0:	4b04      	ldr	r3, [pc, #16]	; (8001cb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	0a1b      	lsrs	r3, r3, #8
 8001ca6:	f003 0307 	and.w	r3, r3, #7
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	db0b      	blt.n	8001ce2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cca:	79fb      	ldrb	r3, [r7, #7]
 8001ccc:	f003 021f 	and.w	r2, r3, #31
 8001cd0:	4907      	ldr	r1, [pc, #28]	; (8001cf0 <__NVIC_EnableIRQ+0x38>)
 8001cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd6:	095b      	lsrs	r3, r3, #5
 8001cd8:	2001      	movs	r0, #1
 8001cda:	fa00 f202 	lsl.w	r2, r0, r2
 8001cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	e000e100 	.word	0xe000e100

08001cf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	6039      	str	r1, [r7, #0]
 8001cfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	db0a      	blt.n	8001d1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	490c      	ldr	r1, [pc, #48]	; (8001d40 <__NVIC_SetPriority+0x4c>)
 8001d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d12:	0112      	lsls	r2, r2, #4
 8001d14:	b2d2      	uxtb	r2, r2
 8001d16:	440b      	add	r3, r1
 8001d18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d1c:	e00a      	b.n	8001d34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	b2da      	uxtb	r2, r3
 8001d22:	4908      	ldr	r1, [pc, #32]	; (8001d44 <__NVIC_SetPriority+0x50>)
 8001d24:	79fb      	ldrb	r3, [r7, #7]
 8001d26:	f003 030f 	and.w	r3, r3, #15
 8001d2a:	3b04      	subs	r3, #4
 8001d2c:	0112      	lsls	r2, r2, #4
 8001d2e:	b2d2      	uxtb	r2, r2
 8001d30:	440b      	add	r3, r1
 8001d32:	761a      	strb	r2, [r3, #24]
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	e000e100 	.word	0xe000e100
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b089      	sub	sp, #36	; 0x24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	f1c3 0307 	rsb	r3, r3, #7
 8001d62:	2b04      	cmp	r3, #4
 8001d64:	bf28      	it	cs
 8001d66:	2304      	movcs	r3, #4
 8001d68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	3304      	adds	r3, #4
 8001d6e:	2b06      	cmp	r3, #6
 8001d70:	d902      	bls.n	8001d78 <NVIC_EncodePriority+0x30>
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	3b03      	subs	r3, #3
 8001d76:	e000      	b.n	8001d7a <NVIC_EncodePriority+0x32>
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	43da      	mvns	r2, r3
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	401a      	ands	r2, r3
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d90:	f04f 31ff 	mov.w	r1, #4294967295
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9a:	43d9      	mvns	r1, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da0:	4313      	orrs	r3, r2
         );
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3724      	adds	r7, #36	; 0x24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
	...

08001db0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dc0:	d301      	bcc.n	8001dc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e00f      	b.n	8001de6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dc6:	4a0a      	ldr	r2, [pc, #40]	; (8001df0 <SysTick_Config+0x40>)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dce:	210f      	movs	r1, #15
 8001dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd4:	f7ff ff8e 	bl	8001cf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dd8:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <SysTick_Config+0x40>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dde:	4b04      	ldr	r3, [pc, #16]	; (8001df0 <SysTick_Config+0x40>)
 8001de0:	2207      	movs	r2, #7
 8001de2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	e000e010 	.word	0xe000e010

08001df4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f7ff ff29 	bl	8001c54 <__NVIC_SetPriorityGrouping>
}
 8001e02:	bf00      	nop
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b086      	sub	sp, #24
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	4603      	mov	r3, r0
 8001e12:	60b9      	str	r1, [r7, #8]
 8001e14:	607a      	str	r2, [r7, #4]
 8001e16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e1c:	f7ff ff3e 	bl	8001c9c <__NVIC_GetPriorityGrouping>
 8001e20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	68b9      	ldr	r1, [r7, #8]
 8001e26:	6978      	ldr	r0, [r7, #20]
 8001e28:	f7ff ff8e 	bl	8001d48 <NVIC_EncodePriority>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e32:	4611      	mov	r1, r2
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff ff5d 	bl	8001cf4 <__NVIC_SetPriority>
}
 8001e3a:	bf00      	nop
 8001e3c:	3718      	adds	r7, #24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b082      	sub	sp, #8
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	4603      	mov	r3, r0
 8001e4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff ff31 	bl	8001cb8 <__NVIC_EnableIRQ>
}
 8001e56:	bf00      	nop
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b082      	sub	sp, #8
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7ff ffa2 	bl	8001db0 <SysTick_Config>
 8001e6c:	4603      	mov	r3, r0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
	...

08001e78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b089      	sub	sp, #36	; 0x24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e82:	2300      	movs	r3, #0
 8001e84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e86:	2300      	movs	r3, #0
 8001e88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61fb      	str	r3, [r7, #28]
 8001e92:	e165      	b.n	8002160 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e94:	2201      	movs	r2, #1
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	f040 8154 	bne.w	800215a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f003 0303 	and.w	r3, r3, #3
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d005      	beq.n	8001eca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d130      	bne.n	8001f2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	2203      	movs	r2, #3
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43db      	mvns	r3, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	68da      	ldr	r2, [r3, #12]
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f00:	2201      	movs	r2, #1
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	091b      	lsrs	r3, r3, #4
 8001f16:	f003 0201 	and.w	r2, r3, #1
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f003 0303 	and.w	r3, r3, #3
 8001f34:	2b03      	cmp	r3, #3
 8001f36:	d017      	beq.n	8001f68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	2203      	movs	r2, #3
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	689a      	ldr	r2, [r3, #8]
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f003 0303 	and.w	r3, r3, #3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d123      	bne.n	8001fbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	08da      	lsrs	r2, r3, #3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3208      	adds	r2, #8
 8001f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	f003 0307 	and.w	r3, r3, #7
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	220f      	movs	r2, #15
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	43db      	mvns	r3, r3
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4013      	ands	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	691a      	ldr	r2, [r3, #16]
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	08da      	lsrs	r2, r3, #3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	3208      	adds	r2, #8
 8001fb6:	69b9      	ldr	r1, [r7, #24]
 8001fb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	2203      	movs	r2, #3
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f003 0203 	and.w	r2, r3, #3
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f000 80ae 	beq.w	800215a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	4b5d      	ldr	r3, [pc, #372]	; (8002178 <HAL_GPIO_Init+0x300>)
 8002004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002006:	4a5c      	ldr	r2, [pc, #368]	; (8002178 <HAL_GPIO_Init+0x300>)
 8002008:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800200c:	6453      	str	r3, [r2, #68]	; 0x44
 800200e:	4b5a      	ldr	r3, [pc, #360]	; (8002178 <HAL_GPIO_Init+0x300>)
 8002010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002012:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800201a:	4a58      	ldr	r2, [pc, #352]	; (800217c <HAL_GPIO_Init+0x304>)
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	089b      	lsrs	r3, r3, #2
 8002020:	3302      	adds	r3, #2
 8002022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002026:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	f003 0303 	and.w	r3, r3, #3
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	220f      	movs	r2, #15
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43db      	mvns	r3, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4013      	ands	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a4f      	ldr	r2, [pc, #316]	; (8002180 <HAL_GPIO_Init+0x308>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d025      	beq.n	8002092 <HAL_GPIO_Init+0x21a>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a4e      	ldr	r2, [pc, #312]	; (8002184 <HAL_GPIO_Init+0x30c>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d01f      	beq.n	800208e <HAL_GPIO_Init+0x216>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a4d      	ldr	r2, [pc, #308]	; (8002188 <HAL_GPIO_Init+0x310>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d019      	beq.n	800208a <HAL_GPIO_Init+0x212>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a4c      	ldr	r2, [pc, #304]	; (800218c <HAL_GPIO_Init+0x314>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d013      	beq.n	8002086 <HAL_GPIO_Init+0x20e>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a4b      	ldr	r2, [pc, #300]	; (8002190 <HAL_GPIO_Init+0x318>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d00d      	beq.n	8002082 <HAL_GPIO_Init+0x20a>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a4a      	ldr	r2, [pc, #296]	; (8002194 <HAL_GPIO_Init+0x31c>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d007      	beq.n	800207e <HAL_GPIO_Init+0x206>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a49      	ldr	r2, [pc, #292]	; (8002198 <HAL_GPIO_Init+0x320>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d101      	bne.n	800207a <HAL_GPIO_Init+0x202>
 8002076:	2306      	movs	r3, #6
 8002078:	e00c      	b.n	8002094 <HAL_GPIO_Init+0x21c>
 800207a:	2307      	movs	r3, #7
 800207c:	e00a      	b.n	8002094 <HAL_GPIO_Init+0x21c>
 800207e:	2305      	movs	r3, #5
 8002080:	e008      	b.n	8002094 <HAL_GPIO_Init+0x21c>
 8002082:	2304      	movs	r3, #4
 8002084:	e006      	b.n	8002094 <HAL_GPIO_Init+0x21c>
 8002086:	2303      	movs	r3, #3
 8002088:	e004      	b.n	8002094 <HAL_GPIO_Init+0x21c>
 800208a:	2302      	movs	r3, #2
 800208c:	e002      	b.n	8002094 <HAL_GPIO_Init+0x21c>
 800208e:	2301      	movs	r3, #1
 8002090:	e000      	b.n	8002094 <HAL_GPIO_Init+0x21c>
 8002092:	2300      	movs	r3, #0
 8002094:	69fa      	ldr	r2, [r7, #28]
 8002096:	f002 0203 	and.w	r2, r2, #3
 800209a:	0092      	lsls	r2, r2, #2
 800209c:	4093      	lsls	r3, r2
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020a4:	4935      	ldr	r1, [pc, #212]	; (800217c <HAL_GPIO_Init+0x304>)
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	089b      	lsrs	r3, r3, #2
 80020aa:	3302      	adds	r3, #2
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020b2:	4b3a      	ldr	r3, [pc, #232]	; (800219c <HAL_GPIO_Init+0x324>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	43db      	mvns	r3, r3
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4013      	ands	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020d6:	4a31      	ldr	r2, [pc, #196]	; (800219c <HAL_GPIO_Init+0x324>)
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020dc:	4b2f      	ldr	r3, [pc, #188]	; (800219c <HAL_GPIO_Init+0x324>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	43db      	mvns	r3, r3
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4013      	ands	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d003      	beq.n	8002100 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002100:	4a26      	ldr	r2, [pc, #152]	; (800219c <HAL_GPIO_Init+0x324>)
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002106:	4b25      	ldr	r3, [pc, #148]	; (800219c <HAL_GPIO_Init+0x324>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	43db      	mvns	r3, r3
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	4013      	ands	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	4313      	orrs	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800212a:	4a1c      	ldr	r2, [pc, #112]	; (800219c <HAL_GPIO_Init+0x324>)
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002130:	4b1a      	ldr	r3, [pc, #104]	; (800219c <HAL_GPIO_Init+0x324>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	43db      	mvns	r3, r3
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4013      	ands	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d003      	beq.n	8002154 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	4313      	orrs	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002154:	4a11      	ldr	r2, [pc, #68]	; (800219c <HAL_GPIO_Init+0x324>)
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	3301      	adds	r3, #1
 800215e:	61fb      	str	r3, [r7, #28]
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	2b0f      	cmp	r3, #15
 8002164:	f67f ae96 	bls.w	8001e94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002168:	bf00      	nop
 800216a:	bf00      	nop
 800216c:	3724      	adds	r7, #36	; 0x24
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	40023800 	.word	0x40023800
 800217c:	40013800 	.word	0x40013800
 8002180:	40020000 	.word	0x40020000
 8002184:	40020400 	.word	0x40020400
 8002188:	40020800 	.word	0x40020800
 800218c:	40020c00 	.word	0x40020c00
 8002190:	40021000 	.word	0x40021000
 8002194:	40021400 	.word	0x40021400
 8002198:	40021800 	.word	0x40021800
 800219c:	40013c00 	.word	0x40013c00

080021a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	460b      	mov	r3, r1
 80021aa:	807b      	strh	r3, [r7, #2]
 80021ac:	4613      	mov	r3, r2
 80021ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021b0:	787b      	ldrb	r3, [r7, #1]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d003      	beq.n	80021be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021b6:	887a      	ldrh	r2, [r7, #2]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021bc:	e003      	b.n	80021c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021be:	887b      	ldrh	r3, [r7, #2]
 80021c0:	041a      	lsls	r2, r3, #16
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	619a      	str	r2, [r3, #24]
}
 80021c6:	bf00      	nop
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr

080021d2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021d2:	b480      	push	{r7}
 80021d4:	b085      	sub	sp, #20
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
 80021da:	460b      	mov	r3, r1
 80021dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021e4:	887a      	ldrh	r2, [r7, #2]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	4013      	ands	r3, r2
 80021ea:	041a      	lsls	r2, r3, #16
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	43d9      	mvns	r1, r3
 80021f0:	887b      	ldrh	r3, [r7, #2]
 80021f2:	400b      	ands	r3, r1
 80021f4:	431a      	orrs	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	619a      	str	r2, [r3, #24]
}
 80021fa:	bf00      	nop
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
	...

08002208 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d101      	bne.n	800221c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e0cc      	b.n	80023b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800221c:	4b68      	ldr	r3, [pc, #416]	; (80023c0 <HAL_RCC_ClockConfig+0x1b8>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 030f 	and.w	r3, r3, #15
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	429a      	cmp	r2, r3
 8002228:	d90c      	bls.n	8002244 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800222a:	4b65      	ldr	r3, [pc, #404]	; (80023c0 <HAL_RCC_ClockConfig+0x1b8>)
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	b2d2      	uxtb	r2, r2
 8002230:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002232:	4b63      	ldr	r3, [pc, #396]	; (80023c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 030f 	and.w	r3, r3, #15
 800223a:	683a      	ldr	r2, [r7, #0]
 800223c:	429a      	cmp	r2, r3
 800223e:	d001      	beq.n	8002244 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e0b8      	b.n	80023b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d020      	beq.n	8002292 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0304 	and.w	r3, r3, #4
 8002258:	2b00      	cmp	r3, #0
 800225a:	d005      	beq.n	8002268 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800225c:	4b59      	ldr	r3, [pc, #356]	; (80023c4 <HAL_RCC_ClockConfig+0x1bc>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	4a58      	ldr	r2, [pc, #352]	; (80023c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002262:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002266:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0308 	and.w	r3, r3, #8
 8002270:	2b00      	cmp	r3, #0
 8002272:	d005      	beq.n	8002280 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002274:	4b53      	ldr	r3, [pc, #332]	; (80023c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	4a52      	ldr	r2, [pc, #328]	; (80023c4 <HAL_RCC_ClockConfig+0x1bc>)
 800227a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800227e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002280:	4b50      	ldr	r3, [pc, #320]	; (80023c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	494d      	ldr	r1, [pc, #308]	; (80023c4 <HAL_RCC_ClockConfig+0x1bc>)
 800228e:	4313      	orrs	r3, r2
 8002290:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	2b00      	cmp	r3, #0
 800229c:	d044      	beq.n	8002328 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d107      	bne.n	80022b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022a6:	4b47      	ldr	r3, [pc, #284]	; (80023c4 <HAL_RCC_ClockConfig+0x1bc>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d119      	bne.n	80022e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e07f      	b.n	80023b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d003      	beq.n	80022c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022c2:	2b03      	cmp	r3, #3
 80022c4:	d107      	bne.n	80022d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022c6:	4b3f      	ldr	r3, [pc, #252]	; (80023c4 <HAL_RCC_ClockConfig+0x1bc>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d109      	bne.n	80022e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e06f      	b.n	80023b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022d6:	4b3b      	ldr	r3, [pc, #236]	; (80023c4 <HAL_RCC_ClockConfig+0x1bc>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e067      	b.n	80023b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022e6:	4b37      	ldr	r3, [pc, #220]	; (80023c4 <HAL_RCC_ClockConfig+0x1bc>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f023 0203 	bic.w	r2, r3, #3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	4934      	ldr	r1, [pc, #208]	; (80023c4 <HAL_RCC_ClockConfig+0x1bc>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022f8:	f7fe fe1a 	bl	8000f30 <HAL_GetTick>
 80022fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022fe:	e00a      	b.n	8002316 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002300:	f7fe fe16 	bl	8000f30 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	f241 3288 	movw	r2, #5000	; 0x1388
 800230e:	4293      	cmp	r3, r2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e04f      	b.n	80023b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002316:	4b2b      	ldr	r3, [pc, #172]	; (80023c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 020c 	and.w	r2, r3, #12
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	429a      	cmp	r2, r3
 8002326:	d1eb      	bne.n	8002300 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002328:	4b25      	ldr	r3, [pc, #148]	; (80023c0 <HAL_RCC_ClockConfig+0x1b8>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 030f 	and.w	r3, r3, #15
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	429a      	cmp	r2, r3
 8002334:	d20c      	bcs.n	8002350 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002336:	4b22      	ldr	r3, [pc, #136]	; (80023c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002338:	683a      	ldr	r2, [r7, #0]
 800233a:	b2d2      	uxtb	r2, r2
 800233c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800233e:	4b20      	ldr	r3, [pc, #128]	; (80023c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 030f 	and.w	r3, r3, #15
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	429a      	cmp	r2, r3
 800234a:	d001      	beq.n	8002350 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e032      	b.n	80023b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	2b00      	cmp	r3, #0
 800235a:	d008      	beq.n	800236e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800235c:	4b19      	ldr	r3, [pc, #100]	; (80023c4 <HAL_RCC_ClockConfig+0x1bc>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	4916      	ldr	r1, [pc, #88]	; (80023c4 <HAL_RCC_ClockConfig+0x1bc>)
 800236a:	4313      	orrs	r3, r2
 800236c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0308 	and.w	r3, r3, #8
 8002376:	2b00      	cmp	r3, #0
 8002378:	d009      	beq.n	800238e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800237a:	4b12      	ldr	r3, [pc, #72]	; (80023c4 <HAL_RCC_ClockConfig+0x1bc>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	490e      	ldr	r1, [pc, #56]	; (80023c4 <HAL_RCC_ClockConfig+0x1bc>)
 800238a:	4313      	orrs	r3, r2
 800238c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800238e:	f000 f821 	bl	80023d4 <HAL_RCC_GetSysClockFreq>
 8002392:	4602      	mov	r2, r0
 8002394:	4b0b      	ldr	r3, [pc, #44]	; (80023c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	091b      	lsrs	r3, r3, #4
 800239a:	f003 030f 	and.w	r3, r3, #15
 800239e:	490a      	ldr	r1, [pc, #40]	; (80023c8 <HAL_RCC_ClockConfig+0x1c0>)
 80023a0:	5ccb      	ldrb	r3, [r1, r3]
 80023a2:	fa22 f303 	lsr.w	r3, r2, r3
 80023a6:	4a09      	ldr	r2, [pc, #36]	; (80023cc <HAL_RCC_ClockConfig+0x1c4>)
 80023a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023aa:	4b09      	ldr	r3, [pc, #36]	; (80023d0 <HAL_RCC_ClockConfig+0x1c8>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7fe fd7a 	bl	8000ea8 <HAL_InitTick>

  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	40023c00 	.word	0x40023c00
 80023c4:	40023800 	.word	0x40023800
 80023c8:	08002cd4 	.word	0x08002cd4
 80023cc:	2000006c 	.word	0x2000006c
 80023d0:	20000070 	.word	0x20000070

080023d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023d8:	b0a6      	sub	sp, #152	; 0x98
 80023da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80023dc:	2300      	movs	r3, #0
 80023de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 80023e2:	2300      	movs	r3, #0
 80023e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 80023e8:	2300      	movs	r3, #0
 80023ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 80023ee:	2300      	movs	r3, #0
 80023f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 80023f4:	2300      	movs	r3, #0
 80023f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023fa:	4bc8      	ldr	r3, [pc, #800]	; (800271c <HAL_RCC_GetSysClockFreq+0x348>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 030c 	and.w	r3, r3, #12
 8002402:	2b0c      	cmp	r3, #12
 8002404:	f200 817e 	bhi.w	8002704 <HAL_RCC_GetSysClockFreq+0x330>
 8002408:	a201      	add	r2, pc, #4	; (adr r2, 8002410 <HAL_RCC_GetSysClockFreq+0x3c>)
 800240a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800240e:	bf00      	nop
 8002410:	08002445 	.word	0x08002445
 8002414:	08002705 	.word	0x08002705
 8002418:	08002705 	.word	0x08002705
 800241c:	08002705 	.word	0x08002705
 8002420:	0800244d 	.word	0x0800244d
 8002424:	08002705 	.word	0x08002705
 8002428:	08002705 	.word	0x08002705
 800242c:	08002705 	.word	0x08002705
 8002430:	08002455 	.word	0x08002455
 8002434:	08002705 	.word	0x08002705
 8002438:	08002705 	.word	0x08002705
 800243c:	08002705 	.word	0x08002705
 8002440:	080025bf 	.word	0x080025bf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002444:	4bb6      	ldr	r3, [pc, #728]	; (8002720 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002446:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 800244a:	e15f      	b.n	800270c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800244c:	4bb5      	ldr	r3, [pc, #724]	; (8002724 <HAL_RCC_GetSysClockFreq+0x350>)
 800244e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002452:	e15b      	b.n	800270c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002454:	4bb1      	ldr	r3, [pc, #708]	; (800271c <HAL_RCC_GetSysClockFreq+0x348>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800245c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002460:	4bae      	ldr	r3, [pc, #696]	; (800271c <HAL_RCC_GetSysClockFreq+0x348>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d031      	beq.n	80024d0 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800246c:	4bab      	ldr	r3, [pc, #684]	; (800271c <HAL_RCC_GetSysClockFreq+0x348>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	099b      	lsrs	r3, r3, #6
 8002472:	2200      	movs	r2, #0
 8002474:	66bb      	str	r3, [r7, #104]	; 0x68
 8002476:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002478:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800247a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800247e:	663b      	str	r3, [r7, #96]	; 0x60
 8002480:	2300      	movs	r3, #0
 8002482:	667b      	str	r3, [r7, #100]	; 0x64
 8002484:	4ba7      	ldr	r3, [pc, #668]	; (8002724 <HAL_RCC_GetSysClockFreq+0x350>)
 8002486:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800248a:	462a      	mov	r2, r5
 800248c:	fb03 f202 	mul.w	r2, r3, r2
 8002490:	2300      	movs	r3, #0
 8002492:	4621      	mov	r1, r4
 8002494:	fb01 f303 	mul.w	r3, r1, r3
 8002498:	4413      	add	r3, r2
 800249a:	4aa2      	ldr	r2, [pc, #648]	; (8002724 <HAL_RCC_GetSysClockFreq+0x350>)
 800249c:	4621      	mov	r1, r4
 800249e:	fba1 1202 	umull	r1, r2, r1, r2
 80024a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80024a4:	460a      	mov	r2, r1
 80024a6:	67ba      	str	r2, [r7, #120]	; 0x78
 80024a8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80024aa:	4413      	add	r3, r2
 80024ac:	67fb      	str	r3, [r7, #124]	; 0x7c
 80024ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024b2:	2200      	movs	r2, #0
 80024b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80024b6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80024b8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80024bc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80024c0:	f7fd fea0 	bl	8000204 <__aeabi_uldivmod>
 80024c4:	4602      	mov	r2, r0
 80024c6:	460b      	mov	r3, r1
 80024c8:	4613      	mov	r3, r2
 80024ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80024ce:	e064      	b.n	800259a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024d0:	4b92      	ldr	r3, [pc, #584]	; (800271c <HAL_RCC_GetSysClockFreq+0x348>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	099b      	lsrs	r3, r3, #6
 80024d6:	2200      	movs	r2, #0
 80024d8:	653b      	str	r3, [r7, #80]	; 0x50
 80024da:	657a      	str	r2, [r7, #84]	; 0x54
 80024dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80024e4:	2300      	movs	r3, #0
 80024e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024e8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80024ec:	4622      	mov	r2, r4
 80024ee:	462b      	mov	r3, r5
 80024f0:	f04f 0000 	mov.w	r0, #0
 80024f4:	f04f 0100 	mov.w	r1, #0
 80024f8:	0159      	lsls	r1, r3, #5
 80024fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024fe:	0150      	lsls	r0, r2, #5
 8002500:	4602      	mov	r2, r0
 8002502:	460b      	mov	r3, r1
 8002504:	4621      	mov	r1, r4
 8002506:	1a51      	subs	r1, r2, r1
 8002508:	6139      	str	r1, [r7, #16]
 800250a:	4629      	mov	r1, r5
 800250c:	eb63 0301 	sbc.w	r3, r3, r1
 8002510:	617b      	str	r3, [r7, #20]
 8002512:	f04f 0200 	mov.w	r2, #0
 8002516:	f04f 0300 	mov.w	r3, #0
 800251a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800251e:	4659      	mov	r1, fp
 8002520:	018b      	lsls	r3, r1, #6
 8002522:	4651      	mov	r1, sl
 8002524:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002528:	4651      	mov	r1, sl
 800252a:	018a      	lsls	r2, r1, #6
 800252c:	4651      	mov	r1, sl
 800252e:	ebb2 0801 	subs.w	r8, r2, r1
 8002532:	4659      	mov	r1, fp
 8002534:	eb63 0901 	sbc.w	r9, r3, r1
 8002538:	f04f 0200 	mov.w	r2, #0
 800253c:	f04f 0300 	mov.w	r3, #0
 8002540:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002544:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002548:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800254c:	4690      	mov	r8, r2
 800254e:	4699      	mov	r9, r3
 8002550:	4623      	mov	r3, r4
 8002552:	eb18 0303 	adds.w	r3, r8, r3
 8002556:	60bb      	str	r3, [r7, #8]
 8002558:	462b      	mov	r3, r5
 800255a:	eb49 0303 	adc.w	r3, r9, r3
 800255e:	60fb      	str	r3, [r7, #12]
 8002560:	f04f 0200 	mov.w	r2, #0
 8002564:	f04f 0300 	mov.w	r3, #0
 8002568:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800256c:	4629      	mov	r1, r5
 800256e:	028b      	lsls	r3, r1, #10
 8002570:	4621      	mov	r1, r4
 8002572:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002576:	4621      	mov	r1, r4
 8002578:	028a      	lsls	r2, r1, #10
 800257a:	4610      	mov	r0, r2
 800257c:	4619      	mov	r1, r3
 800257e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002582:	2200      	movs	r2, #0
 8002584:	643b      	str	r3, [r7, #64]	; 0x40
 8002586:	647a      	str	r2, [r7, #68]	; 0x44
 8002588:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800258c:	f7fd fe3a 	bl	8000204 <__aeabi_uldivmod>
 8002590:	4602      	mov	r2, r0
 8002592:	460b      	mov	r3, r1
 8002594:	4613      	mov	r3, r2
 8002596:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800259a:	4b60      	ldr	r3, [pc, #384]	; (800271c <HAL_RCC_GetSysClockFreq+0x348>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	0c1b      	lsrs	r3, r3, #16
 80025a0:	f003 0303 	and.w	r3, r3, #3
 80025a4:	3301      	adds	r3, #1
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 80025ac:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80025b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80025b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80025bc:	e0a6      	b.n	800270c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025be:	4b57      	ldr	r3, [pc, #348]	; (800271c <HAL_RCC_GetSysClockFreq+0x348>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025ca:	4b54      	ldr	r3, [pc, #336]	; (800271c <HAL_RCC_GetSysClockFreq+0x348>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d02a      	beq.n	800262c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025d6:	4b51      	ldr	r3, [pc, #324]	; (800271c <HAL_RCC_GetSysClockFreq+0x348>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	099b      	lsrs	r3, r3, #6
 80025dc:	2200      	movs	r2, #0
 80025de:	63bb      	str	r3, [r7, #56]	; 0x38
 80025e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80025e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80025e8:	2100      	movs	r1, #0
 80025ea:	4b4e      	ldr	r3, [pc, #312]	; (8002724 <HAL_RCC_GetSysClockFreq+0x350>)
 80025ec:	fb03 f201 	mul.w	r2, r3, r1
 80025f0:	2300      	movs	r3, #0
 80025f2:	fb00 f303 	mul.w	r3, r0, r3
 80025f6:	4413      	add	r3, r2
 80025f8:	4a4a      	ldr	r2, [pc, #296]	; (8002724 <HAL_RCC_GetSysClockFreq+0x350>)
 80025fa:	fba0 1202 	umull	r1, r2, r0, r2
 80025fe:	677a      	str	r2, [r7, #116]	; 0x74
 8002600:	460a      	mov	r2, r1
 8002602:	673a      	str	r2, [r7, #112]	; 0x70
 8002604:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002606:	4413      	add	r3, r2
 8002608:	677b      	str	r3, [r7, #116]	; 0x74
 800260a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800260e:	2200      	movs	r2, #0
 8002610:	633b      	str	r3, [r7, #48]	; 0x30
 8002612:	637a      	str	r2, [r7, #52]	; 0x34
 8002614:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002618:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800261c:	f7fd fdf2 	bl	8000204 <__aeabi_uldivmod>
 8002620:	4602      	mov	r2, r0
 8002622:	460b      	mov	r3, r1
 8002624:	4613      	mov	r3, r2
 8002626:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800262a:	e05b      	b.n	80026e4 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800262c:	4b3b      	ldr	r3, [pc, #236]	; (800271c <HAL_RCC_GetSysClockFreq+0x348>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	099b      	lsrs	r3, r3, #6
 8002632:	2200      	movs	r2, #0
 8002634:	62bb      	str	r3, [r7, #40]	; 0x28
 8002636:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800263a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800263e:	623b      	str	r3, [r7, #32]
 8002640:	2300      	movs	r3, #0
 8002642:	627b      	str	r3, [r7, #36]	; 0x24
 8002644:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002648:	4642      	mov	r2, r8
 800264a:	464b      	mov	r3, r9
 800264c:	f04f 0000 	mov.w	r0, #0
 8002650:	f04f 0100 	mov.w	r1, #0
 8002654:	0159      	lsls	r1, r3, #5
 8002656:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800265a:	0150      	lsls	r0, r2, #5
 800265c:	4602      	mov	r2, r0
 800265e:	460b      	mov	r3, r1
 8002660:	4641      	mov	r1, r8
 8002662:	ebb2 0a01 	subs.w	sl, r2, r1
 8002666:	4649      	mov	r1, r9
 8002668:	eb63 0b01 	sbc.w	fp, r3, r1
 800266c:	f04f 0200 	mov.w	r2, #0
 8002670:	f04f 0300 	mov.w	r3, #0
 8002674:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002678:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800267c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002680:	ebb2 040a 	subs.w	r4, r2, sl
 8002684:	eb63 050b 	sbc.w	r5, r3, fp
 8002688:	f04f 0200 	mov.w	r2, #0
 800268c:	f04f 0300 	mov.w	r3, #0
 8002690:	00eb      	lsls	r3, r5, #3
 8002692:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002696:	00e2      	lsls	r2, r4, #3
 8002698:	4614      	mov	r4, r2
 800269a:	461d      	mov	r5, r3
 800269c:	4643      	mov	r3, r8
 800269e:	18e3      	adds	r3, r4, r3
 80026a0:	603b      	str	r3, [r7, #0]
 80026a2:	464b      	mov	r3, r9
 80026a4:	eb45 0303 	adc.w	r3, r5, r3
 80026a8:	607b      	str	r3, [r7, #4]
 80026aa:	f04f 0200 	mov.w	r2, #0
 80026ae:	f04f 0300 	mov.w	r3, #0
 80026b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026b6:	4629      	mov	r1, r5
 80026b8:	028b      	lsls	r3, r1, #10
 80026ba:	4621      	mov	r1, r4
 80026bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026c0:	4621      	mov	r1, r4
 80026c2:	028a      	lsls	r2, r1, #10
 80026c4:	4610      	mov	r0, r2
 80026c6:	4619      	mov	r1, r3
 80026c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026cc:	2200      	movs	r2, #0
 80026ce:	61bb      	str	r3, [r7, #24]
 80026d0:	61fa      	str	r2, [r7, #28]
 80026d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026d6:	f7fd fd95 	bl	8000204 <__aeabi_uldivmod>
 80026da:	4602      	mov	r2, r0
 80026dc:	460b      	mov	r3, r1
 80026de:	4613      	mov	r3, r2
 80026e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80026e4:	4b0d      	ldr	r3, [pc, #52]	; (800271c <HAL_RCC_GetSysClockFreq+0x348>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	0f1b      	lsrs	r3, r3, #28
 80026ea:	f003 0307 	and.w	r3, r3, #7
 80026ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 80026f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80026f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80026fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002702:	e003      	b.n	800270c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002704:	4b06      	ldr	r3, [pc, #24]	; (8002720 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002706:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800270a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800270c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8002710:	4618      	mov	r0, r3
 8002712:	3798      	adds	r7, #152	; 0x98
 8002714:	46bd      	mov	sp, r7
 8002716:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800271a:	bf00      	nop
 800271c:	40023800 	.word	0x40023800
 8002720:	00f42400 	.word	0x00f42400
 8002724:	017d7840 	.word	0x017d7840

08002728 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e28d      	b.n	8002c56 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b00      	cmp	r3, #0
 8002744:	f000 8083 	beq.w	800284e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002748:	4b94      	ldr	r3, [pc, #592]	; (800299c <HAL_RCC_OscConfig+0x274>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f003 030c 	and.w	r3, r3, #12
 8002750:	2b04      	cmp	r3, #4
 8002752:	d019      	beq.n	8002788 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002754:	4b91      	ldr	r3, [pc, #580]	; (800299c <HAL_RCC_OscConfig+0x274>)
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800275c:	2b08      	cmp	r3, #8
 800275e:	d106      	bne.n	800276e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002760:	4b8e      	ldr	r3, [pc, #568]	; (800299c <HAL_RCC_OscConfig+0x274>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002768:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800276c:	d00c      	beq.n	8002788 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800276e:	4b8b      	ldr	r3, [pc, #556]	; (800299c <HAL_RCC_OscConfig+0x274>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002776:	2b0c      	cmp	r3, #12
 8002778:	d112      	bne.n	80027a0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800277a:	4b88      	ldr	r3, [pc, #544]	; (800299c <HAL_RCC_OscConfig+0x274>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002782:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002786:	d10b      	bne.n	80027a0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002788:	4b84      	ldr	r3, [pc, #528]	; (800299c <HAL_RCC_OscConfig+0x274>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d05b      	beq.n	800284c <HAL_RCC_OscConfig+0x124>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d157      	bne.n	800284c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e25a      	b.n	8002c56 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027a8:	d106      	bne.n	80027b8 <HAL_RCC_OscConfig+0x90>
 80027aa:	4b7c      	ldr	r3, [pc, #496]	; (800299c <HAL_RCC_OscConfig+0x274>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a7b      	ldr	r2, [pc, #492]	; (800299c <HAL_RCC_OscConfig+0x274>)
 80027b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027b4:	6013      	str	r3, [r2, #0]
 80027b6:	e01d      	b.n	80027f4 <HAL_RCC_OscConfig+0xcc>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027c0:	d10c      	bne.n	80027dc <HAL_RCC_OscConfig+0xb4>
 80027c2:	4b76      	ldr	r3, [pc, #472]	; (800299c <HAL_RCC_OscConfig+0x274>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a75      	ldr	r2, [pc, #468]	; (800299c <HAL_RCC_OscConfig+0x274>)
 80027c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027cc:	6013      	str	r3, [r2, #0]
 80027ce:	4b73      	ldr	r3, [pc, #460]	; (800299c <HAL_RCC_OscConfig+0x274>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a72      	ldr	r2, [pc, #456]	; (800299c <HAL_RCC_OscConfig+0x274>)
 80027d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027d8:	6013      	str	r3, [r2, #0]
 80027da:	e00b      	b.n	80027f4 <HAL_RCC_OscConfig+0xcc>
 80027dc:	4b6f      	ldr	r3, [pc, #444]	; (800299c <HAL_RCC_OscConfig+0x274>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a6e      	ldr	r2, [pc, #440]	; (800299c <HAL_RCC_OscConfig+0x274>)
 80027e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027e6:	6013      	str	r3, [r2, #0]
 80027e8:	4b6c      	ldr	r3, [pc, #432]	; (800299c <HAL_RCC_OscConfig+0x274>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a6b      	ldr	r2, [pc, #428]	; (800299c <HAL_RCC_OscConfig+0x274>)
 80027ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d013      	beq.n	8002824 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fc:	f7fe fb98 	bl	8000f30 <HAL_GetTick>
 8002800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002802:	e008      	b.n	8002816 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002804:	f7fe fb94 	bl	8000f30 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b64      	cmp	r3, #100	; 0x64
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e21f      	b.n	8002c56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002816:	4b61      	ldr	r3, [pc, #388]	; (800299c <HAL_RCC_OscConfig+0x274>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d0f0      	beq.n	8002804 <HAL_RCC_OscConfig+0xdc>
 8002822:	e014      	b.n	800284e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002824:	f7fe fb84 	bl	8000f30 <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800282c:	f7fe fb80 	bl	8000f30 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b64      	cmp	r3, #100	; 0x64
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e20b      	b.n	8002c56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800283e:	4b57      	ldr	r3, [pc, #348]	; (800299c <HAL_RCC_OscConfig+0x274>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1f0      	bne.n	800282c <HAL_RCC_OscConfig+0x104>
 800284a:	e000      	b.n	800284e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800284c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d06f      	beq.n	800293a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800285a:	4b50      	ldr	r3, [pc, #320]	; (800299c <HAL_RCC_OscConfig+0x274>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f003 030c 	and.w	r3, r3, #12
 8002862:	2b00      	cmp	r3, #0
 8002864:	d017      	beq.n	8002896 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002866:	4b4d      	ldr	r3, [pc, #308]	; (800299c <HAL_RCC_OscConfig+0x274>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800286e:	2b08      	cmp	r3, #8
 8002870:	d105      	bne.n	800287e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002872:	4b4a      	ldr	r3, [pc, #296]	; (800299c <HAL_RCC_OscConfig+0x274>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00b      	beq.n	8002896 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800287e:	4b47      	ldr	r3, [pc, #284]	; (800299c <HAL_RCC_OscConfig+0x274>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002886:	2b0c      	cmp	r3, #12
 8002888:	d11c      	bne.n	80028c4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800288a:	4b44      	ldr	r3, [pc, #272]	; (800299c <HAL_RCC_OscConfig+0x274>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d116      	bne.n	80028c4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002896:	4b41      	ldr	r3, [pc, #260]	; (800299c <HAL_RCC_OscConfig+0x274>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d005      	beq.n	80028ae <HAL_RCC_OscConfig+0x186>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d001      	beq.n	80028ae <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e1d3      	b.n	8002c56 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ae:	4b3b      	ldr	r3, [pc, #236]	; (800299c <HAL_RCC_OscConfig+0x274>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	4937      	ldr	r1, [pc, #220]	; (800299c <HAL_RCC_OscConfig+0x274>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028c2:	e03a      	b.n	800293a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d020      	beq.n	800290e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028cc:	4b34      	ldr	r3, [pc, #208]	; (80029a0 <HAL_RCC_OscConfig+0x278>)
 80028ce:	2201      	movs	r2, #1
 80028d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d2:	f7fe fb2d 	bl	8000f30 <HAL_GetTick>
 80028d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028d8:	e008      	b.n	80028ec <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028da:	f7fe fb29 	bl	8000f30 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e1b4      	b.n	8002c56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ec:	4b2b      	ldr	r3, [pc, #172]	; (800299c <HAL_RCC_OscConfig+0x274>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d0f0      	beq.n	80028da <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028f8:	4b28      	ldr	r3, [pc, #160]	; (800299c <HAL_RCC_OscConfig+0x274>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	4925      	ldr	r1, [pc, #148]	; (800299c <HAL_RCC_OscConfig+0x274>)
 8002908:	4313      	orrs	r3, r2
 800290a:	600b      	str	r3, [r1, #0]
 800290c:	e015      	b.n	800293a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800290e:	4b24      	ldr	r3, [pc, #144]	; (80029a0 <HAL_RCC_OscConfig+0x278>)
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002914:	f7fe fb0c 	bl	8000f30 <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800291c:	f7fe fb08 	bl	8000f30 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e193      	b.n	8002c56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800292e:	4b1b      	ldr	r3, [pc, #108]	; (800299c <HAL_RCC_OscConfig+0x274>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1f0      	bne.n	800291c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0308 	and.w	r3, r3, #8
 8002942:	2b00      	cmp	r3, #0
 8002944:	d036      	beq.n	80029b4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d016      	beq.n	800297c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800294e:	4b15      	ldr	r3, [pc, #84]	; (80029a4 <HAL_RCC_OscConfig+0x27c>)
 8002950:	2201      	movs	r2, #1
 8002952:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002954:	f7fe faec 	bl	8000f30 <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800295c:	f7fe fae8 	bl	8000f30 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e173      	b.n	8002c56 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800296e:	4b0b      	ldr	r3, [pc, #44]	; (800299c <HAL_RCC_OscConfig+0x274>)
 8002970:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d0f0      	beq.n	800295c <HAL_RCC_OscConfig+0x234>
 800297a:	e01b      	b.n	80029b4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800297c:	4b09      	ldr	r3, [pc, #36]	; (80029a4 <HAL_RCC_OscConfig+0x27c>)
 800297e:	2200      	movs	r2, #0
 8002980:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002982:	f7fe fad5 	bl	8000f30 <HAL_GetTick>
 8002986:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002988:	e00e      	b.n	80029a8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800298a:	f7fe fad1 	bl	8000f30 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d907      	bls.n	80029a8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e15c      	b.n	8002c56 <HAL_RCC_OscConfig+0x52e>
 800299c:	40023800 	.word	0x40023800
 80029a0:	42470000 	.word	0x42470000
 80029a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029a8:	4b8a      	ldr	r3, [pc, #552]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 80029aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1ea      	bne.n	800298a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0304 	and.w	r3, r3, #4
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f000 8097 	beq.w	8002af0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029c2:	2300      	movs	r3, #0
 80029c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029c6:	4b83      	ldr	r3, [pc, #524]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 80029c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d10f      	bne.n	80029f2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029d2:	2300      	movs	r3, #0
 80029d4:	60bb      	str	r3, [r7, #8]
 80029d6:	4b7f      	ldr	r3, [pc, #508]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	4a7e      	ldr	r2, [pc, #504]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 80029dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029e0:	6413      	str	r3, [r2, #64]	; 0x40
 80029e2:	4b7c      	ldr	r3, [pc, #496]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ea:	60bb      	str	r3, [r7, #8]
 80029ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029ee:	2301      	movs	r3, #1
 80029f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f2:	4b79      	ldr	r3, [pc, #484]	; (8002bd8 <HAL_RCC_OscConfig+0x4b0>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d118      	bne.n	8002a30 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029fe:	4b76      	ldr	r3, [pc, #472]	; (8002bd8 <HAL_RCC_OscConfig+0x4b0>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a75      	ldr	r2, [pc, #468]	; (8002bd8 <HAL_RCC_OscConfig+0x4b0>)
 8002a04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a0a:	f7fe fa91 	bl	8000f30 <HAL_GetTick>
 8002a0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a10:	e008      	b.n	8002a24 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a12:	f7fe fa8d 	bl	8000f30 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e118      	b.n	8002c56 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a24:	4b6c      	ldr	r3, [pc, #432]	; (8002bd8 <HAL_RCC_OscConfig+0x4b0>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d0f0      	beq.n	8002a12 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d106      	bne.n	8002a46 <HAL_RCC_OscConfig+0x31e>
 8002a38:	4b66      	ldr	r3, [pc, #408]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 8002a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a3c:	4a65      	ldr	r2, [pc, #404]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 8002a3e:	f043 0301 	orr.w	r3, r3, #1
 8002a42:	6713      	str	r3, [r2, #112]	; 0x70
 8002a44:	e01c      	b.n	8002a80 <HAL_RCC_OscConfig+0x358>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	2b05      	cmp	r3, #5
 8002a4c:	d10c      	bne.n	8002a68 <HAL_RCC_OscConfig+0x340>
 8002a4e:	4b61      	ldr	r3, [pc, #388]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 8002a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a52:	4a60      	ldr	r2, [pc, #384]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 8002a54:	f043 0304 	orr.w	r3, r3, #4
 8002a58:	6713      	str	r3, [r2, #112]	; 0x70
 8002a5a:	4b5e      	ldr	r3, [pc, #376]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 8002a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5e:	4a5d      	ldr	r2, [pc, #372]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 8002a60:	f043 0301 	orr.w	r3, r3, #1
 8002a64:	6713      	str	r3, [r2, #112]	; 0x70
 8002a66:	e00b      	b.n	8002a80 <HAL_RCC_OscConfig+0x358>
 8002a68:	4b5a      	ldr	r3, [pc, #360]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 8002a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a6c:	4a59      	ldr	r2, [pc, #356]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 8002a6e:	f023 0301 	bic.w	r3, r3, #1
 8002a72:	6713      	str	r3, [r2, #112]	; 0x70
 8002a74:	4b57      	ldr	r3, [pc, #348]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 8002a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a78:	4a56      	ldr	r2, [pc, #344]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 8002a7a:	f023 0304 	bic.w	r3, r3, #4
 8002a7e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d015      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a88:	f7fe fa52 	bl	8000f30 <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a8e:	e00a      	b.n	8002aa6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a90:	f7fe fa4e 	bl	8000f30 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e0d7      	b.n	8002c56 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aa6:	4b4b      	ldr	r3, [pc, #300]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 8002aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d0ee      	beq.n	8002a90 <HAL_RCC_OscConfig+0x368>
 8002ab2:	e014      	b.n	8002ade <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab4:	f7fe fa3c 	bl	8000f30 <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aba:	e00a      	b.n	8002ad2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002abc:	f7fe fa38 	bl	8000f30 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e0c1      	b.n	8002c56 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ad2:	4b40      	ldr	r3, [pc, #256]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 8002ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1ee      	bne.n	8002abc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ade:	7dfb      	ldrb	r3, [r7, #23]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d105      	bne.n	8002af0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ae4:	4b3b      	ldr	r3, [pc, #236]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae8:	4a3a      	ldr	r2, [pc, #232]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 8002aea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f000 80ad 	beq.w	8002c54 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002afa:	4b36      	ldr	r3, [pc, #216]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f003 030c 	and.w	r3, r3, #12
 8002b02:	2b08      	cmp	r3, #8
 8002b04:	d060      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d145      	bne.n	8002b9a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b0e:	4b33      	ldr	r3, [pc, #204]	; (8002bdc <HAL_RCC_OscConfig+0x4b4>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b14:	f7fe fa0c 	bl	8000f30 <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b1c:	f7fe fa08 	bl	8000f30 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e093      	b.n	8002c56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b2e:	4b29      	ldr	r3, [pc, #164]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1f0      	bne.n	8002b1c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	69da      	ldr	r2, [r3, #28]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	431a      	orrs	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b48:	019b      	lsls	r3, r3, #6
 8002b4a:	431a      	orrs	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b50:	085b      	lsrs	r3, r3, #1
 8002b52:	3b01      	subs	r3, #1
 8002b54:	041b      	lsls	r3, r3, #16
 8002b56:	431a      	orrs	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5c:	061b      	lsls	r3, r3, #24
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b64:	071b      	lsls	r3, r3, #28
 8002b66:	491b      	ldr	r1, [pc, #108]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b6c:	4b1b      	ldr	r3, [pc, #108]	; (8002bdc <HAL_RCC_OscConfig+0x4b4>)
 8002b6e:	2201      	movs	r2, #1
 8002b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b72:	f7fe f9dd 	bl	8000f30 <HAL_GetTick>
 8002b76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b78:	e008      	b.n	8002b8c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b7a:	f7fe f9d9 	bl	8000f30 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e064      	b.n	8002c56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b8c:	4b11      	ldr	r3, [pc, #68]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d0f0      	beq.n	8002b7a <HAL_RCC_OscConfig+0x452>
 8002b98:	e05c      	b.n	8002c54 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b9a:	4b10      	ldr	r3, [pc, #64]	; (8002bdc <HAL_RCC_OscConfig+0x4b4>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba0:	f7fe f9c6 	bl	8000f30 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ba8:	f7fe f9c2 	bl	8000f30 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e04d      	b.n	8002c56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bba:	4b06      	ldr	r3, [pc, #24]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1f0      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x480>
 8002bc6:	e045      	b.n	8002c54 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d107      	bne.n	8002be0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e040      	b.n	8002c56 <HAL_RCC_OscConfig+0x52e>
 8002bd4:	40023800 	.word	0x40023800
 8002bd8:	40007000 	.word	0x40007000
 8002bdc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002be0:	4b1f      	ldr	r3, [pc, #124]	; (8002c60 <HAL_RCC_OscConfig+0x538>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d030      	beq.n	8002c50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d129      	bne.n	8002c50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d122      	bne.n	8002c50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c10:	4013      	ands	r3, r2
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d119      	bne.n	8002c50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c26:	085b      	lsrs	r3, r3, #1
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d10f      	bne.n	8002c50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d107      	bne.n	8002c50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d001      	beq.n	8002c54 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e000      	b.n	8002c56 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3718      	adds	r7, #24
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	40023800 	.word	0x40023800

08002c64 <__libc_init_array>:
 8002c64:	b570      	push	{r4, r5, r6, lr}
 8002c66:	4d0d      	ldr	r5, [pc, #52]	; (8002c9c <__libc_init_array+0x38>)
 8002c68:	4c0d      	ldr	r4, [pc, #52]	; (8002ca0 <__libc_init_array+0x3c>)
 8002c6a:	1b64      	subs	r4, r4, r5
 8002c6c:	10a4      	asrs	r4, r4, #2
 8002c6e:	2600      	movs	r6, #0
 8002c70:	42a6      	cmp	r6, r4
 8002c72:	d109      	bne.n	8002c88 <__libc_init_array+0x24>
 8002c74:	4d0b      	ldr	r5, [pc, #44]	; (8002ca4 <__libc_init_array+0x40>)
 8002c76:	4c0c      	ldr	r4, [pc, #48]	; (8002ca8 <__libc_init_array+0x44>)
 8002c78:	f000 f820 	bl	8002cbc <_init>
 8002c7c:	1b64      	subs	r4, r4, r5
 8002c7e:	10a4      	asrs	r4, r4, #2
 8002c80:	2600      	movs	r6, #0
 8002c82:	42a6      	cmp	r6, r4
 8002c84:	d105      	bne.n	8002c92 <__libc_init_array+0x2e>
 8002c86:	bd70      	pop	{r4, r5, r6, pc}
 8002c88:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c8c:	4798      	blx	r3
 8002c8e:	3601      	adds	r6, #1
 8002c90:	e7ee      	b.n	8002c70 <__libc_init_array+0xc>
 8002c92:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c96:	4798      	blx	r3
 8002c98:	3601      	adds	r6, #1
 8002c9a:	e7f2      	b.n	8002c82 <__libc_init_array+0x1e>
 8002c9c:	08002cec 	.word	0x08002cec
 8002ca0:	08002cec 	.word	0x08002cec
 8002ca4:	08002cec 	.word	0x08002cec
 8002ca8:	08002cf0 	.word	0x08002cf0

08002cac <memset>:
 8002cac:	4402      	add	r2, r0
 8002cae:	4603      	mov	r3, r0
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d100      	bne.n	8002cb6 <memset+0xa>
 8002cb4:	4770      	bx	lr
 8002cb6:	f803 1b01 	strb.w	r1, [r3], #1
 8002cba:	e7f9      	b.n	8002cb0 <memset+0x4>

08002cbc <_init>:
 8002cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cbe:	bf00      	nop
 8002cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cc2:	bc08      	pop	{r3}
 8002cc4:	469e      	mov	lr, r3
 8002cc6:	4770      	bx	lr

08002cc8 <_fini>:
 8002cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cca:	bf00      	nop
 8002ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cce:	bc08      	pop	{r3}
 8002cd0:	469e      	mov	lr, r3
 8002cd2:	4770      	bx	lr
